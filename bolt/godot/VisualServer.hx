package bolt.godot;

class VisualServerSignalNames {
    public static var framePostDraw: String = "frame_post_draw";
    public static var framePreDraw: String = "frame_pre_draw";
}
@:native("godot.VisualServer")
extern class VisualServer extends Object {
    public var renderLoopEnabled: Bool;
    public function blackBarsSetImages(left: RID, top: RID, right: RID, bottom: RID): Void;
    public function blackBarsSetMargins(left: Int, top: Int, right: Int, bottom: Int): Void;
    public function cameraCreate(): RID;
    public function cameraSetCullMask(camera: RID, layers: Int): Void;
    public function cameraSetEnvironment(camera: RID, env: RID): Void;
    public function cameraSetFrustum(camera: RID, size: Float, offset: GdVector2, zNear: Float, zFar: Float): Void;
    public function cameraSetOrthogonal(camera: RID, size: Float, zNear: Float, zFar: Float): Void;
    public function cameraSetPerspective(camera: RID, fovyDegrees: Float, zNear: Float, zFar: Float): Void;
    public function cameraSetTransform(camera: RID, transform: Transform): Void;
    public function cameraSetUseVerticalAspect(camera: RID, enable: Bool): Void;
    public function canvasCreate(): RID;
    public function canvasItemAddCircle(item: RID, pos: GdVector2, radius: Float, color: Color): Void;
    public function canvasItemAddClipIgnore(item: RID, ignore: Bool): Void;
    public function canvasItemAddLine(item: RID, from: GdVector2, to: GdVector2, color: Color, width: Float = 1.0, antialiased: Bool = false): Void;
    public function canvasItemAddMesh(item: RID, mesh: RID, transform: Transform2D, modulate: Color, texture: RID, normalMap: RID): Void;
    public function canvasItemAddMultimesh(item: RID, mesh: RID, texture: RID, normalMap: RID): Void;
    public function canvasItemAddNinePatch(item: RID, rect: Rect2, source: Rect2, texture: RID, topleft: GdVector2, bottomright: GdVector2, xAxisMode: Int = 0, yAxisMode: Int = 0, drawCenter: Bool = true, modulate: Color, normalMap: RID): Void;
    public function canvasItemAddParticles(item: RID, particles: RID, texture: RID, normalMap: RID): Void;
    public function canvasItemAddPolygon(item: RID, points: PoolVector2Array, colors: PoolColorArray, uvs: PoolVector2Array, texture: RID, normalMap: RID, antialiased: Bool = false): Void;
    public function canvasItemAddPolyline(item: RID, points: PoolVector2Array, colors: PoolColorArray, width: Float = 1.0, antialiased: Bool = false): Void;
    public function canvasItemAddPrimitive(item: RID, points: PoolVector2Array, colors: PoolColorArray, uvs: PoolVector2Array, texture: RID, width: Float = 1.0, normalMap: RID): Void;
    public function canvasItemAddRect(item: RID, rect: Rect2, color: Color): Void;
    public function canvasItemAddSetTransform(item: RID, transform: Transform2D): Void;
    public function canvasItemAddTextureRect(item: RID, rect: Rect2, texture: RID, tile: Bool = false, modulate: Color, transpose: Bool = false, normalMap: RID): Void;
    public function canvasItemAddTextureRectRegion(item: RID, rect: Rect2, texture: RID, srcRect: Rect2, modulate: Color, transpose: Bool = false, normalMap: RID, clipUv: Bool = true): Void;
    public function canvasItemAddTriangleArray(item: RID, indices: PoolIntArray, points: PoolVector2Array, colors: PoolColorArray, uvs: PoolVector2Array, bones: PoolIntArray, weights: PoolRealArray, texture: RID, count: Int = -1, normalMap: RID, antialiased: Bool = false, antialiasingUseIndices: Bool = false): Void;
    public function canvasItemClear(item: RID): Void;
    public function canvasItemCreate(): RID;
    public function canvasItemResetPhysicsInterpolation(item: RID): Void;
    public function canvasItemSetClip(item: RID, clip: Bool): Void;
    public function canvasItemSetCopyToBackbuffer(item: RID, enabled: Bool, rect: Rect2): Void;
    public function canvasItemSetCustomRect(item: RID, useCustomRect: Bool, rect: Rect2): Void;
    public function canvasItemSetDistanceFieldMode(item: RID, enabled: Bool): Void;
    public function canvasItemSetDrawBehindParent(item: RID, enabled: Bool): Void;
    public function canvasItemSetDrawIndex(item: RID, index: Int): Void;
    public function canvasItemSetInterpolated(item: RID, interpolated: Bool): Void;
    public function canvasItemSetLightMask(item: RID, mask: Int): Void;
    public function canvasItemSetMaterial(item: RID, material: RID): Void;
    public function canvasItemSetModulate(item: RID, color: Color): Void;
    public function canvasItemSetParent(item: RID, parent: RID): Void;
    public function canvasItemSetSelfModulate(item: RID, color: Color): Void;
    public function canvasItemSetSortChildrenByY(item: RID, enabled: Bool): Void;
    public function canvasItemSetTransform(item: RID, transform: Transform2D): Void;
    public function canvasItemSetUseParentMaterial(item: RID, enabled: Bool): Void;
    public function canvasItemSetVisible(item: RID, visible: Bool): Void;
    public function canvasItemSetZAsRelativeToParent(item: RID, enabled: Bool): Void;
    public function canvasItemSetZIndex(item: RID, zIndex: Int): Void;
    public function canvasItemTransformPhysicsInterpolation(item: RID, xform: Transform2D): Void;
    public function canvasLightAttachToCanvas(light: RID, canvas: RID): Void;
    public function canvasLightCreate(): RID;
    public function canvasLightOccluderAttachToCanvas(occluder: RID, canvas: RID): Void;
    public function canvasLightOccluderCreate(): RID;
    public function canvasLightOccluderResetPhysicsInterpolation(occluder: RID): Void;
    public function canvasLightOccluderSetEnabled(occluder: RID, enabled: Bool): Void;
    public function canvasLightOccluderSetInterpolated(occluder: RID, interpolated: Bool): Void;
    public function canvasLightOccluderSetLightMask(occluder: RID, mask: Int): Void;
    public function canvasLightOccluderSetPolygon(occluder: RID, polygon: RID): Void;
    public function canvasLightOccluderSetTransform(occluder: RID, transform: Transform2D): Void;
    public function canvasLightOccluderTransformPhysicsInterpolation(occluder: RID, xform: Transform2D): Void;
    public function canvasLightResetPhysicsInterpolation(light: RID): Void;
    public function canvasLightSetColor(light: RID, color: Color): Void;
    public function canvasLightSetEnabled(light: RID, enabled: Bool): Void;
    public function canvasLightSetEnergy(light: RID, energy: Float): Void;
    public function canvasLightSetHeight(light: RID, height: Float): Void;
    public function canvasLightSetInterpolated(light: RID, interpolated: Bool): Void;
    public function canvasLightSetItemCullMask(light: RID, mask: Int): Void;
    public function canvasLightSetItemShadowCullMask(light: RID, mask: Int): Void;
    public function canvasLightSetLayerRange(light: RID, minLayer: Int, maxLayer: Int): Void;
    public function canvasLightSetMode(light: RID, mode: Int): Void;
    public function canvasLightSetScale(light: RID, scale: Float): Void;
    public function canvasLightSetShadowBufferSize(light: RID, size: Int): Void;
    public function canvasLightSetShadowColor(light: RID, color: Color): Void;
    public function canvasLightSetShadowEnabled(light: RID, enabled: Bool): Void;
    public function canvasLightSetShadowFilter(light: RID, filter: Int): Void;
    public function canvasLightSetShadowGradientLength(light: RID, length: Float): Void;
    public function canvasLightSetShadowSmooth(light: RID, smooth: Float): Void;
    public function canvasLightSetTexture(light: RID, texture: RID): Void;
    public function canvasLightSetTextureOffset(light: RID, offset: GdVector2): Void;
    public function canvasLightSetTransform(light: RID, transform: Transform2D): Void;
    public function canvasLightSetZRange(light: RID, minZ: Int, maxZ: Int): Void;
    public function canvasLightTransformPhysicsInterpolation(light: RID, xform: Transform2D): Void;
    public function canvasOccluderPolygonCreate(): RID;
    public function canvasOccluderPolygonSetCullMode(occluderPolygon: RID, mode: Int): Void;
    public function canvasOccluderPolygonSetShape(occluderPolygon: RID, shape: PoolVector2Array, closed: Bool): Void;
    public function canvasOccluderPolygonSetShapeAsLines(occluderPolygon: RID, shape: PoolVector2Array): Void;
    public function canvasSetItemMirroring(canvas: RID, item: RID, mirroring: GdVector2): Void;
    public function canvasSetModulate(canvas: RID, color: Color): Void;
    public function debugCanvasItemGetLocalBound(item: RID): Rect2;
    public function debugCanvasItemGetRect(item: RID): Rect2;
    public function directionalLightCreate(): RID;
    public function draw(swapBuffers: Bool = true, frameStep: Float = 0.0): Void;
    public function environmentCreate(): RID;
    public function environmentSetAdjustment(env: RID, enable: Bool, brightness: Float, contrast: Float, saturation: Float, ramp: RID): Void;
    public function environmentSetAmbientLight(env: RID, color: Color, energy: Float = 1.0, skyContibution: Float = 0.0): Void;
    public function environmentSetBackground(env: RID, bg: Int): Void;
    public function environmentSetBgColor(env: RID, color: Color): Void;
    public function environmentSetBgEnergy(env: RID, energy: Float): Void;
    public function environmentSetCanvasMaxLayer(env: RID, maxLayer: Int): Void;
    public function environmentSetDofBlurFar(env: RID, enable: Bool, distance: Float, transition: Float, farAmount: Float, quality: Int): Void;
    public function environmentSetDofBlurNear(env: RID, enable: Bool, distance: Float, transition: Float, farAmount: Float, quality: Int): Void;
    public function environmentSetFog(env: RID, enable: Bool, color: Color, sunColor: Color, sunAmount: Float): Void;
    public function environmentSetFogDepth(env: RID, enable: Bool, depthBegin: Float, depthEnd: Float, depthCurve: Float, transmit: Bool, transmitCurve: Float): Void;
    public function environmentSetFogHeight(env: RID, enable: Bool, minHeight: Float, maxHeight: Float, heightCurve: Float): Void;
    public function environmentSetGlow(env: RID, enable: Bool, levelFlags: Int, intensity: Float, strength: Float, bloomThreshold: Float, blendMode: Int, hdrBleedThreshold: Float, hdrBleedScale: Float, hdrLuminanceCap: Float, bicubicUpscale: Bool, highQuality: Bool): Void;
    public function environmentSetSky(env: RID, sky: RID): Void;
    public function environmentSetSkyCustomFov(env: RID, scale: Float): Void;
    public function environmentSetSkyOrientation(env: RID, orientation: Basis): Void;
    public function environmentSetSsao(env: RID, enable: Bool, radius: Float, intensity: Float, radius2: Float, intensity2: Float, bias: Float, lightAffect: Float, aoChannelAffect: Float, color: Color, quality: Int, blur: Int, bilateralSharpness: Float): Void;
    public function environmentSetSsr(env: RID, enable: Bool, maxSteps: Int, fadeIn: Float, fadeOut: Float, depthTolerance: Float, roughness: Bool): Void;
    public function environmentSetTonemap(env: RID, toneMapper: Int, exposure: Float, white: Float, autoExposure: Bool, minLuminance: Float, maxLuminance: Float, autoExpSpeed: Float, autoExpGrey: Float): Void;
    public function finish(): Void;
    public function forceDraw(swapBuffers: Bool = true, frameStep: Float = 0.0): Void;
    public function forceSync(): Void;
    public function freeRid(rid: RID): Void;
    public function getRenderInfo(info: Int): Int;
    public function getTestCube(): RID;
    public function getTestTexture(): RID;
    public function getVideoAdapterName(): String;
    public function getVideoAdapterVendor(): String;
    public function getWhiteTexture(): RID;
    public function giProbeCreate(): RID;
    public function giProbeGetBias(probe: RID): Float;
    public function giProbeGetBounds(probe: RID): AABB;
    public function giProbeGetCellSize(probe: RID): Float;
    public function giProbeGetDynamicData(probe: RID): PoolIntArray;
    public function giProbeGetDynamicRange(probe: RID): Int;
    public function giProbeGetEnergy(probe: RID): Float;
    public function giProbeGetNormalBias(probe: RID): Float;
    public function giProbeGetPropagation(probe: RID): Float;
    public function giProbeGetToCellXform(probe: RID): Transform;
    public function giProbeIsCompressed(probe: RID): Bool;
    public function giProbeIsInterior(probe: RID): Bool;
    public function giProbeSetBias(probe: RID, bias: Float): Void;
    public function giProbeSetBounds(probe: RID, bounds: AABB): Void;
    public function giProbeSetCellSize(probe: RID, range: Float): Void;
    public function giProbeSetCompress(probe: RID, enable: Bool): Void;
    public function giProbeSetDynamicData(probe: RID, data: PoolIntArray): Void;
    public function giProbeSetDynamicRange(probe: RID, range: Int): Void;
    public function giProbeSetEnergy(probe: RID, energy: Float): Void;
    public function giProbeSetInterior(probe: RID, enable: Bool): Void;
    public function giProbeSetNormalBias(probe: RID, bias: Float): Void;
    public function giProbeSetPropagation(probe: RID, propagation: Float): Void;
    public function giProbeSetToCellXform(probe: RID, xform: Transform): Void;
    public function hasChanged(queriedPriority: Int = 0): Bool;
    public function hasFeature(feature: Int): Bool;
    public function hasOsFeature(feature: String): Bool;
    public function immediateBegin(immediate: RID, primitive: Int, texture: RID): Void;
    public function immediateClear(immediate: RID): Void;
    public function immediateColor(immediate: RID, color: Color): Void;
    public function immediateCreate(): RID;
    public function immediateEnd(immediate: RID): Void;
    public function immediateGetMaterial(immediate: RID): RID;
    public function immediateNormal(immediate: RID, normal: GdVector3): Void;
    public function immediateSetMaterial(immediate: RID, material: RID): Void;
    public function immediateTangent(immediate: RID, tangent: Plane): Void;
    public function immediateUv(immediate: RID, texUv: GdVector2): Void;
    public function immediateUv2(immediate: RID, texUv: GdVector2): Void;
    public function immediateVertex(immediate: RID, vertex: GdVector3): Void;
    public function immediateVertex2d(immediate: RID, vertex: GdVector2): Void;
    public function init(): Void;
    public function instanceAttachObjectInstanceId(instance: RID, id: Int): Void;
    public function instanceAttachSkeleton(instance: RID, skeleton: RID): Void;
    public function instanceCreate(): RID;
    public function instanceCreate2(base: RID, scenario: RID): RID;
    public function instanceGeometrySetCastShadowsSetting(instance: RID, shadowCastingSetting: Int): Void;
    public function instanceGeometrySetFlag(instance: RID, flag: Int, enabled: Bool): Void;
    public function instanceGeometrySetMaterialOverlay(instance: RID, material: RID): Void;
    public function instanceGeometrySetMaterialOverride(instance: RID, material: RID): Void;
    public function instanceResetPhysicsInterpolation(instance: RID): Void;
    public function instanceSetBase(instance: RID, base: RID): Void;
    public function instanceSetBlendShapeWeight(instance: RID, shape: Int, weight: Float): Void;
    public function instanceSetCustomAabb(instance: RID, aabb: AABB): Void;
    public function instanceSetExterior(instance: RID, enabled: Bool): Void;
    public function instanceSetExtraVisibilityMargin(instance: RID, margin: Float): Void;
    public function instanceSetInterpolated(instance: RID, interpolated: Bool): Void;
    public function instanceSetLayerMask(instance: RID, mask: Int): Void;
    public function instanceSetScenario(instance: RID, scenario: RID): Void;
    public function instanceSetSurfaceMaterial(instance: RID, surface: Int, material: RID): Void;
    public function instanceSetTransform(instance: RID, transform: Transform): Void;
    public function instanceSetUseLightmap(instance: RID, lightmapInstance: RID, lightmap: RID, lightmapSlice: Int = -1, lightmapUvRect: Rect2): Void;
    public function instanceSetVisible(instance: RID, visible: Bool): Void;
    public function instancesCullAabb(aabb: AABB, scenario: RID): Array<Dynamic>;
    public function instancesCullConvex(convex: Array<Dynamic>, scenario: RID): Array<Dynamic>;
    public function instancesCullRay(from: GdVector3, to: GdVector3, scenario: RID): Array<Dynamic>;
    public function lightDirectionalSetBlendSplits(light: RID, enable: Bool): Void;
    public function lightDirectionalSetShadowDepthRangeMode(light: RID, rangeMode: Int): Void;
    public function lightDirectionalSetShadowMode(light: RID, mode: Int): Void;
    public function lightOmniSetShadowDetail(light: RID, detail: Int): Void;
    public function lightOmniSetShadowMode(light: RID, mode: Int): Void;
    public function lightSetBakeMode(light: RID, bakeMode: Int): Void;
    public function lightSetColor(light: RID, color: Color): Void;
    public function lightSetCullMask(light: RID, mask: Int): Void;
    public function lightSetNegative(light: RID, enable: Bool): Void;
    public function lightSetParam(light: RID, param: Int, value: Float): Void;
    public function lightSetProjector(light: RID, texture: RID): Void;
    public function lightSetReverseCullFaceMode(light: RID, enabled: Bool): Void;
    public function lightSetShadow(light: RID, enabled: Bool): Void;
    public function lightSetShadowColor(light: RID, color: Color): Void;
    public function lightSetUseGi(light: RID, enabled: Bool): Void;
    public function lightmapCaptureCreate(): RID;
    public function lightmapCaptureGetBounds(capture: RID): AABB;
    public function lightmapCaptureGetEnergy(capture: RID): Float;
    public function lightmapCaptureGetOctree(capture: RID): Dynamic;
    public function lightmapCaptureGetOctreeCellSubdiv(capture: RID): Int;
    public function lightmapCaptureGetOctreeCellTransform(capture: RID): Transform;
    public function lightmapCaptureIsInterior(capture: RID): Bool;
    public function lightmapCaptureSetBounds(capture: RID, bounds: AABB): Void;
    public function lightmapCaptureSetEnergy(capture: RID, energy: Float): Void;
    public function lightmapCaptureSetInterior(capture: RID, interior: Bool): Void;
    public function lightmapCaptureSetOctree(capture: RID, octree: Dynamic): Void;
    public function lightmapCaptureSetOctreeCellSubdiv(capture: RID, subdiv: Int): Void;
    public function lightmapCaptureSetOctreeCellTransform(capture: RID, xform: Transform): Void;
    public function makeSphereMesh(latitudes: Int, longitudes: Int, radius: Float): RID;
    public function materialCreate(): RID;
    public function materialGetParam(material: RID, parameter: String): Dynamic;
    public function materialGetParamDefault(material: RID, parameter: String): Dynamic;
    public function materialGetShader(shaderMaterial: RID): RID;
    public function materialSetLineWidth(material: RID, width: Float): Void;
    public function materialSetNextPass(material: RID, nextMaterial: RID): Void;
    public function materialSetParam(material: RID, parameter: String, value: Dynamic): Void;
    public function materialSetRenderPriority(material: RID, priority: Int): Void;
    public function materialSetShader(shaderMaterial: RID, shader: RID): Void;
    public function meshAddSurfaceFromArrays(mesh: RID, primitive: Int, arrays: Array<Dynamic>, blendShapes: Array<Dynamic>, compressFormat: Int = 2194432): Void;
    public function meshClear(mesh: RID): Void;
    public function meshCreate(): RID;
    public function meshGetBlendShapeCount(mesh: RID): Int;
    public function meshGetBlendShapeMode(mesh: RID): Int;
    public function meshGetCustomAabb(mesh: RID): AABB;
    public function meshGetSurfaceCount(mesh: RID): Int;
    public function meshRemoveSurface(mesh: RID, index: Int): Void;
    public function meshSetBlendShapeCount(mesh: RID, amount: Int): Void;
    public function meshSetBlendShapeMode(mesh: RID, mode: Int): Void;
    public function meshSetCustomAabb(mesh: RID, aabb: AABB): Void;
    public function meshSurfaceGetAabb(mesh: RID, surface: Int): AABB;
    public function meshSurfaceGetArray(mesh: RID, surface: Int): Dynamic;
    public function meshSurfaceGetArrayIndexLen(mesh: RID, surface: Int): Int;
    public function meshSurfaceGetArrayLen(mesh: RID, surface: Int): Int;
    public function meshSurfaceGetArrays(mesh: RID, surface: Int): Array<Dynamic>;
    public function meshSurfaceGetBlendShapeArrays(mesh: RID, surface: Int): Array<Dynamic>;
    public function meshSurfaceGetFormat(mesh: RID, surface: Int): Int;
    public function meshSurfaceGetFormatOffset(format: Int, vertexLen: Int, indexLen: Int, arrayIndex: Int): Int;
    public function meshSurfaceGetFormatStride(format: Int, vertexLen: Int, indexLen: Int, arrayIndex: Int): Int;
    public function meshSurfaceGetIndexArray(mesh: RID, surface: Int): Dynamic;
    public function meshSurfaceGetMaterial(mesh: RID, surface: Int): RID;
    public function meshSurfaceGetPrimitiveType(mesh: RID, surface: Int): Int;
    public function meshSurfaceGetSkeletonAabb(mesh: RID, surface: Int): Array<Dynamic>;
    public function meshSurfaceSetMaterial(mesh: RID, surface: Int, material: RID): Void;
    public function meshSurfaceUpdateRegion(mesh: RID, surface: Int, offset: Int, data: Dynamic): Void;
    public function multimeshAllocate(multimesh: RID, instances: Int, transformFormat: Int, colorFormat: Int, customDataFormat: Int = 0): Void;
    public function multimeshCreate(): RID;
    public function multimeshGetAabb(multimesh: RID): AABB;
    public function multimeshGetInstanceCount(multimesh: RID): Int;
    public function multimeshGetMesh(multimesh: RID): RID;
    public function multimeshGetVisibleInstances(multimesh: RID): Int;
    public function multimeshInstanceGetColor(multimesh: RID, index: Int): Color;
    public function multimeshInstanceGetCustomData(multimesh: RID, index: Int): Color;
    public function multimeshInstanceGetTransform(multimesh: RID, index: Int): Transform;
    public function multimeshInstanceGetTransform2d(multimesh: RID, index: Int): Transform2D;
    public function multimeshInstanceResetPhysicsInterpolation(multimesh: RID, index: Int): Void;
    public function multimeshInstanceSetColor(multimesh: RID, index: Int, color: Color): Void;
    public function multimeshInstanceSetCustomData(multimesh: RID, index: Int, customData: Color): Void;
    public function multimeshInstanceSetTransform(multimesh: RID, index: Int, transform: Transform): Void;
    public function multimeshInstanceSetTransform2d(multimesh: RID, index: Int, transform: Transform2D): Void;
    public function multimeshSetAsBulkArray(multimesh: RID, array: PoolRealArray): Void;
    public function multimeshSetAsBulkArrayInterpolated(multimesh: RID, array: PoolRealArray, arrayPrevious: PoolRealArray): Void;
    public function multimeshSetMesh(multimesh: RID, mesh: RID): Void;
    public function multimeshSetPhysicsInterpolated(multimesh: RID, interpolated: Bool): Void;
    public function multimeshSetPhysicsInterpolationQuality(multimesh: RID, quality: Int): Void;
    public function multimeshSetVisibleInstances(multimesh: RID, visible: Int): Void;
    public function omniLightCreate(): RID;
    public function particlesCreate(): RID;
    public function particlesGetCurrentAabb(particles: RID): AABB;
    public function particlesGetEmitting(particles: RID): Bool;
    public function particlesIsInactive(particles: RID): Bool;
    public function particlesRequestProcess(particles: RID): Void;
    public function particlesRestart(particles: RID): Void;
    public function particlesSetAmount(particles: RID, amount: Int): Void;
    public function particlesSetCustomAabb(particles: RID, aabb: AABB): Void;
    public function particlesSetDrawOrder(particles: RID, order: Int): Void;
    public function particlesSetDrawPassMesh(particles: RID, pass: Int, mesh: RID): Void;
    public function particlesSetDrawPasses(particles: RID, count: Int): Void;
    public function particlesSetEmissionTransform(particles: RID, transform: Transform): Void;
    public function particlesSetEmitting(particles: RID, emitting: Bool): Void;
    public function particlesSetExplosivenessRatio(particles: RID, ratio: Float): Void;
    public function particlesSetFixedFps(particles: RID, fps: Int): Void;
    public function particlesSetFractionalDelta(particles: RID, enable: Bool): Void;
    public function particlesSetLifetime(particles: RID, lifetime: Float): Void;
    public function particlesSetOneShot(particles: RID, oneShot: Bool): Void;
    public function particlesSetPreProcessTime(particles: RID, time: Float): Void;
    public function particlesSetProcessMaterial(particles: RID, material: RID): Void;
    public function particlesSetRandomnessRatio(particles: RID, ratio: Float): Void;
    public function particlesSetSpeedScale(particles: RID, scale: Float): Void;
    public function particlesSetUseLocalCoordinates(particles: RID, enable: Bool): Void;
    public function reflectionProbeCreate(): RID;
    public function reflectionProbeSetAsInterior(probe: RID, enable: Bool): Void;
    public function reflectionProbeSetCullMask(probe: RID, layers: Int): Void;
    public function reflectionProbeSetEnableBoxProjection(probe: RID, enable: Bool): Void;
    public function reflectionProbeSetEnableShadows(probe: RID, enable: Bool): Void;
    public function reflectionProbeSetExtents(probe: RID, extents: GdVector3): Void;
    public function reflectionProbeSetIntensity(probe: RID, intensity: Float): Void;
    public function reflectionProbeSetInteriorAmbient(probe: RID, color: Color): Void;
    public function reflectionProbeSetInteriorAmbientEnergy(probe: RID, energy: Float): Void;
    public function reflectionProbeSetInteriorAmbientProbeContribution(probe: RID, contrib: Float): Void;
    public function reflectionProbeSetMaxDistance(probe: RID, distance: Float): Void;
    public function reflectionProbeSetOriginOffset(probe: RID, offset: GdVector3): Void;
    public function reflectionProbeSetUpdateMode(probe: RID, mode: Int): Void;
    public function requestFrameDrawnCallback(where: Object, method: String, userdata: Dynamic): Void;
    public function scenarioCreate(): RID;
    public function scenarioSetDebug(scenario: RID, debugMode: Int): Void;
    public function scenarioSetEnvironment(scenario: RID, environment: RID): Void;
    public function scenarioSetFallbackEnvironment(scenario: RID, environment: RID): Void;
    public function scenarioSetReflectionAtlasSize(scenario: RID, size: Int, subdiv: Int): Void;
    public function setBootImage(image: Image, color: Color, scale: Bool, useFilter: Bool = true): Void;
    public function setDebugGenerateWireframes(generate: Bool): Void;
    public function setDefaultClearColor(color: Color): Void;
    public function setShaderAsyncHiddenForbidden(forbidden: Bool): Void;
    public function setShaderTimeScale(scale: Float): Void;
    public function setUseOcclusionCulling(enable: Bool): Void;
    public function shaderCreate(): RID;
    public function shaderGetCode(shader: RID): String;
    public function shaderGetDefaultTextureParam(shader: RID, name: String): RID;
    public function shaderGetParamList(shader: RID): Array<Dynamic>;
    public function shaderSetCode(shader: RID, code: String): Void;
    public function shaderSetDefaultTextureParam(shader: RID, name: String, texture: RID): Void;
    public function skeletonAllocate(skeleton: RID, bones: Int, is2dSkeleton: Bool = false): Void;
    public function skeletonBoneGetTransform(skeleton: RID, bone: Int): Transform;
    public function skeletonBoneGetTransform2d(skeleton: RID, bone: Int): Transform2D;
    public function skeletonBoneSetTransform(skeleton: RID, bone: Int, transform: Transform): Void;
    public function skeletonBoneSetTransform2d(skeleton: RID, bone: Int, transform: Transform2D): Void;
    public function skeletonCreate(): RID;
    public function skeletonGetBoneCount(skeleton: RID): Int;
    public function skyCreate(): RID;
    public function skySetTexture(sky: RID, cubeMap: RID, radianceSize: Int): Void;
    public function spotLightCreate(): RID;
    public function sync(): Void;
    public function textureAllocate(texture: RID, width: Int, height: Int, depth3d: Int, format: Int, type: Int, flags: Int = 7): Void;
    public function textureBind(texture: RID, number: Int): Void;
    public function textureCreate(): RID;
    public function textureCreateFromImage(image: Image, flags: Int = 7): RID;
    public function textureDebugUsage(): Array<Dynamic>;
    public function textureGetData(texture: RID, cubeSide: Int = 0): Image;
    public function textureGetDepth(texture: RID): Int;
    public function textureGetFlags(texture: RID): Int;
    public function textureGetFormat(texture: RID): Int;
    public function textureGetHeight(texture: RID): Int;
    public function textureGetPath(texture: RID): String;
    public function textureGetTexid(texture: RID): Int;
    public function textureGetType(texture: RID): Int;
    public function textureGetWidth(texture: RID): Int;
    public function textureSetData(texture: RID, image: Image, layer: Int = 0): Void;
    public function textureSetDataPartial(texture: RID, image: Image, srcX: Int, srcY: Int, srcW: Int, srcH: Int, dstX: Int, dstY: Int, dstMip: Int, layer: Int = 0): Void;
    public function textureSetFlags(texture: RID, flags: Int): Void;
    public function textureSetPath(texture: RID, path: String): Void;
    public function textureSetProxy(proxy: RID, base: RID): Void;
    public function textureSetShrinkAllX2OnSetData(shrink: Bool): Void;
    public function textureSetSizeOverride(texture: RID, width: Int, height: Int, depth: Int): Void;
    public function texturesKeepOriginal(enable: Bool): Void;
    public function viewportAttachCamera(viewport: RID, camera: RID): Void;
    public function viewportAttachCanvas(viewport: RID, canvas: RID): Void;
    public function viewportAttachToScreen(viewport: RID, rect: Rect2, screen: Int = 0): Void;
    public function viewportCreate(): RID;
    public function viewportDetach(viewport: RID): Void;
    public function viewportGetRenderInfo(viewport: RID, info: Int): Int;
    public function viewportGetTexture(viewport: RID): RID;
    public function viewportRemoveCanvas(viewport: RID, canvas: RID): Void;
    public function viewportSetActive(viewport: RID, active: Bool): Void;
    public function viewportSetCanvasStacking(viewport: RID, canvas: RID, layer: Int, sublayer: Int): Void;
    public function viewportSetCanvasTransform(viewport: RID, canvas: RID, offset: Transform2D): Void;
    public function viewportSetClearMode(viewport: RID, clearMode: Int): Void;
    public function viewportSetDebugDraw(viewport: RID, draw: Int): Void;
    public function viewportSetDisable3d(viewport: RID, disabled: Bool): Void;
    public function viewportSetDisableEnvironment(viewport: RID, disabled: Bool): Void;
    public function viewportSetGlobalCanvasTransform(viewport: RID, transform: Transform2D): Void;
    public function viewportSetHdr(viewport: RID, enabled: Bool): Void;
    public function viewportSetHideCanvas(viewport: RID, hidden: Bool): Void;
    public function viewportSetHideScenario(viewport: RID, hidden: Bool): Void;
    public function viewportSetMsaa(viewport: RID, msaa: Int): Void;
    public function viewportSetParentViewport(viewport: RID, parentViewport: RID): Void;
    public function viewportSetRenderDirectToScreen(viewport: RID, enabled: Bool): Void;
    public function viewportSetScenario(viewport: RID, scenario: RID): Void;
    public function viewportSetShadowAtlasQuadrantSubdivision(viewport: RID, quadrant: Int, subdivision: Int): Void;
    public function viewportSetShadowAtlasSize(viewport: RID, size: Int): Void;
    public function viewportSetSharpenIntensity(viewport: RID, intensity: Float): Void;
    public function viewportSetSize(viewport: RID, width: Int, height: Int): Void;
    public function viewportSetTransparentBackground(viewport: RID, enabled: Bool): Void;
    public function viewportSetUpdateMode(viewport: RID, updateMode: Int): Void;
    public function viewportSetUsage(viewport: RID, usage: Int): Void;
    public function viewportSetUse32BpcDepth(viewport: RID, enabled: Bool): Void;
    public function viewportSetUseArvr(viewport: RID, useArvr: Bool): Void;
    public function viewportSetUseDebanding(viewport: RID, debanding: Bool): Void;
    public function viewportSetUseFxaa(viewport: RID, fxaa: Bool): Void;
    public function viewportSetVflip(viewport: RID, enabled: Bool): Void;
    @:native("__new")
    public function new();
}
