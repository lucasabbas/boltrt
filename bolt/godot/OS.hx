package bolt.godot;

class OSScreenOrientation {
    public static var Landscape: Int = 0;
    public static var Portrait: Int = 1;
    public static var ReverseLandscape: Int = 2;
    public static var ReversePortrait: Int = 3;
    public static var SensorLandscape: Int = 4;
    public static var SensorPortrait: Int = 5;
    public static var Sensor: Int = 6;
}
class OSSignalNames {
}
@:native("godot.OS")
extern class OS extends Object {
    public static var clipboard: String;
    public static var currentScreen: Int;
    public static var deltaSmoothing: Bool;
    public static var exitCode: Int;
    public static var keepScreenOn: Bool;
    public static var lowProcessorUsageMode: Bool;
    public static var lowProcessorUsageModeSleepUsec: Int;
    public static var maxWindowSize: Vector2;
    public static var minWindowSize: Vector2;
    public static var screenOrientation: Int;
    public static var tabletDriver: String;
    public static var vsyncEnabled: Bool;
    public static var vsyncViaCompositor: Bool;
    public static var windowBorderless: Bool;
    public static var windowFullscreen: Bool;
    public static var windowMaximized: Bool;
    public static var windowMinimized: Bool;
    public static var windowPerPixelTransparencyEnabled: Bool;
    public static var windowPosition: Vector2;
    public static var windowResizable: Bool;
    public static var windowSize: Vector2;
    public static function alert(text: String, title: String): Void;
    public static function canDraw(): Bool;
    public static function canUseThreads(): Bool;
    public static function centerWindow(): Void;
    public static function closeMidiInputs(): Void;
    public static function crash(message: String): Void;
    public static function delayMsec(msec: Int): Void;
    public static function delayUsec(usec: Int): Void;
    public static function dumpMemoryToFile(file: String): Void;
    public static function dumpResourcesToFile(file: String): Void;
    public static function execute(path: String, arguments: lua.Table<Int, String>, blocking: Bool = true, output: Array<Dynamic>, readStderr: Bool = false, openConsole: Bool = false): Int;
    public static function findScancodeFromString(string: String): Int;
    public static function getAudioDriverCount(): Int;
    public static function getAudioDriverName(driver: Int): String;
    public static function getCacheDir(): String;
    public static function getCmdlineArgs(): lua.Table<Int, String>;
    public static function getConfigDir(): String;
    public static function getConnectedMidiInputs(): lua.Table<Int, String>;
    public static function getCurrentVideoDriver(): Int;
    public static function getDataDir(): String;
    public static function getDate(utc: Bool = false): Map<Dynamic, Dynamic>;
    public static function getDatetime(utc: Bool = false): Map<Dynamic, Dynamic>;
    public static function getDatetimeFromUnixTime(unixTimeVal: Int): Map<Dynamic, Dynamic>;
    public static function getDisplayCutouts(): Array<Dynamic>;
    public static function getDynamicMemoryUsage(): Int;
    public static function getEnvironment(variable: String): String;
    public static function getExecutablePath(): String;
    public static function getGrantedPermissions(): lua.Table<Int, String>;
    public static function getImeSelection(): Vector2;
    public static function getImeText(): String;
    public static function getLatinKeyboardVariant(): String;
    public static function getLocale(): String;
    public static function getLocaleLanguage(): String;
    public static function getMainThreadId(): Int;
    public static function getModelName(): String;
    public static function getName(): String;
    public static function getNativeHandle(handleType: Int): Int;
    public static function getPowerPercentLeft(): Int;
    public static function getPowerSecondsLeft(): Int;
    public static function getPowerState(): Int;
    public static function getProcessId(): Int;
    public static function getProcessorCount(): Int;
    public static function getProcessorName(): String;
    public static function getRealWindowSize(): Vector2;
    public static function getRestartOnExitArguments(): lua.Table<Int, String>;
    public static function getScancodeString(code: Int): String;
    public static function getScreenCount(): Int;
    public static function getScreenDpi(screen: Int = -1): Int;
    public static function getScreenMaxScale(): Float;
    public static function getScreenPosition(screen: Int = -1): Vector2;
    public static function getScreenRefreshRate(screen: Int = -1): Float;
    public static function getScreenScale(screen: Int = -1): Float;
    public static function getScreenSize(screen: Int = -1): Vector2;
    public static function getSplashTickMsec(): Int;
    public static function getStaticMemoryPeakUsage(): Int;
    public static function getStaticMemoryUsage(): Int;
    public static function getSystemDir(dir: Int, sharedStorage: Bool = true): String;
    public static function getSystemTimeMsecs(): Int;
    public static function getSystemTimeSecs(): Int;
    public static function getTabletDriverCount(): Int;
    public static function getTabletDriverName(idx: Int): String;
    public static function getThreadCallerId(): Int;
    public static function getTicksMsec(): Int;
    public static function getTicksUsec(): Int;
    public static function getTime(utc: Bool = false): Map<Dynamic, Dynamic>;
    public static function getTimeZoneInfo(): Map<Dynamic, Dynamic>;
    public static function getUniqueId(): String;
    public static function getUnixTime(): Int;
    public static function getUnixTimeFromDatetime(datetime: Map<Dynamic, Dynamic>): Int;
    public static function getUserDataDir(): String;
    public static function getVideoDriverCount(): Int;
    public static function getVideoDriverName(driver: Int): String;
    public static function getVirtualKeyboardHeight(): Int;
    public static function getWindowSafeArea(): Rect2;
    public static function globalMenuAddItem(menu: String, label: String, id: Dynamic, meta: Dynamic): Void;
    public static function globalMenuAddSeparator(menu: String): Void;
    public static function globalMenuClear(menu: String): Void;
    public static function globalMenuRemoveItem(menu: String, idx: Int): Void;
    public static function hasClipboard(): Bool;
    public static function hasEnvironment(variable: String): Bool;
    public static function hasFeature(tagName: String): Bool;
    public static function hasTouchscreenUiHint(): Bool;
    public static function hasVirtualKeyboard(): Bool;
    public static function hideVirtualKeyboard(): Void;
    public static function isDebugBuild(): Bool;
    public static function isOkLeftAndCancelRight(): Bool;
    public static function isProcessRunning(pid: Int): Bool;
    public static function isRestartOnExitSet(): Bool;
    public static function isScancodeUnicode(code: Int): Bool;
    public static function isStdoutVerbose(): Bool;
    public static function isUserfsPersistent(): Bool;
    public static function isWindowAlwaysOnTop(): Bool;
    public static function isWindowFocused(): Bool;
    public static function keyboardGetCurrentLayout(): Int;
    public static function keyboardGetLayoutCount(): Int;
    public static function keyboardGetLayoutLanguage(index: Int): String;
    public static function keyboardGetLayoutName(index: Int): String;
    public static function keyboardGetScancodeFromPhysical(scancode: Int): Int;
    public static function keyboardSetCurrentLayout(index: Int): Void;
    public static function kill(pid: Int): Int;
    public static function moveToTrash(path: String): Int;
    public static function moveWindowToForeground(): Void;
    public static function nativeVideoIsPlaying(): Bool;
    public static function nativeVideoPause(): Void;
    public static function nativeVideoPlay(path: String, volume: Float, audioTrack: String, subtitleTrack: String): Int;
    public static function nativeVideoStop(): Void;
    public static function nativeVideoUnpause(): Void;
    public static function openMidiInputs(): Void;
    public static function printAllResources(tofile: String): Void;
    public static function printAllTexturesBySize(): Void;
    public static function printResourcesByType(types: lua.Table<Int, String>): Void;
    public static function printResourcesInUse(short: Bool = false): Void;
    public static function readStringFromStdin(): String;
    public static function requestAttention(): Void;
    public static function requestPermission(name: String): Bool;
    public static function requestPermissions(): Bool;
    public static function setEnvironment(variable: String, value: String): Bool;
    public static function setIcon(icon: Image): Void;
    public static function setImeActive(active: Bool): Void;
    public static function setImePosition(position: GdVector2): Void;
    public static function setNativeIcon(filename: String): Void;
    public static function setRestartOnExit(restart: Bool, arguments: lua.Table<Int, String>): Void;
    public static function setThreadName(name: String): Int;
    public static function setUseFileAccessSaveAndSwap(enabled: Bool): Void;
    public static function setWindowAlwaysOnTop(enabled: Bool): Void;
    public static function setWindowMousePassthrough(region: PoolVector2Array): Void;
    public static function setWindowTitle(title: String): Void;
    public static function shellOpen(uri: String): Int;
    public static function showVirtualKeyboard(existingText: String, multiline: Bool = false): Void;
    public static function showVirtualKeyboardType(existingText: String, type: Int = 0): Void;
    public static function ttsGetVoices(): Array<Dynamic>;
    public static function ttsGetVoicesForLanguage(language: String): lua.Table<Int, String>;
    public static function ttsIsPaused(): Bool;
    public static function ttsIsSpeaking(): Bool;
    public static function ttsPause(): Void;
    public static function ttsResume(): Void;
    public static function ttsSetUtteranceCallback(event: Int, object: Object, callback: String): Void;
    public static function ttsSpeak(text: String, voice: String, volume: Int = 50, pitch: Float = 1.0, rate: Float = 1.0, utteranceId: Int = 0, interrupt: Bool = false): Void;
    public static function ttsStop(): Void;
    @:native("__new")
    public function new();
}
