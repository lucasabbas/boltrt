package bolt.godot;

class Physics2DServerSignalNames {
}
@:native("godot.Physics2DServer")
extern class Physics2DServer extends Object {
    public function areaAddShape(area: RID, shape: RID, transform: Transform2D, disabled: Bool = false): Void;
    public function areaAttachCanvasInstanceId(area: RID, id: Int): Void;
    public function areaAttachObjectInstanceId(area: RID, id: Int): Void;
    public function areaClearShapes(area: RID): Void;
    public function areaCreate(): RID;
    public function areaGetCanvasInstanceId(area: RID): Int;
    public function areaGetObjectInstanceId(area: RID): Int;
    public function areaGetParam(area: RID, param: Int): Dynamic;
    public function areaGetShape(area: RID, shapeIdx: Int): RID;
    public function areaGetShapeCount(area: RID): Int;
    public function areaGetShapeTransform(area: RID, shapeIdx: Int): Transform2D;
    public function areaGetSpace(area: RID): RID;
    public function areaGetSpaceOverrideMode(area: RID): Int;
    public function areaGetTransform(area: RID): Transform2D;
    public function areaRemoveShape(area: RID, shapeIdx: Int): Void;
    public function areaSetAreaMonitorCallback(area: RID, receiver: Object, method: String): Void;
    public function areaSetCollisionLayer(area: RID, layer: Int): Void;
    public function areaSetCollisionMask(area: RID, mask: Int): Void;
    public function areaSetMonitorCallback(area: RID, receiver: Object, method: String): Void;
    public function areaSetMonitorable(area: RID, monitorable: Bool): Void;
    public function areaSetParam(area: RID, param: Int, value: Dynamic): Void;
    public function areaSetShape(area: RID, shapeIdx: Int, shape: RID): Void;
    public function areaSetShapeDisabled(area: RID, shapeIdx: Int, disabled: Bool): Void;
    public function areaSetShapeTransform(area: RID, shapeIdx: Int, transform: Transform2D): Void;
    public function areaSetSpace(area: RID, space: RID): Void;
    public function areaSetSpaceOverrideMode(area: RID, mode: Int): Void;
    public function areaSetTransform(area: RID, transform: Transform2D): Void;
    public function bodyAddCentralForce(body: RID, force: GdVector2): Void;
    public function bodyAddCollisionException(body: RID, exceptedBody: RID): Void;
    public function bodyAddForce(body: RID, offset: GdVector2, force: GdVector2): Void;
    public function bodyAddShape(body: RID, shape: RID, transform: Transform2D, disabled: Bool = false): Void;
    public function bodyAddTorque(body: RID, torque: Float): Void;
    public function bodyApplyCentralImpulse(body: RID, impulse: GdVector2): Void;
    public function bodyApplyImpulse(body: RID, position: GdVector2, impulse: GdVector2): Void;
    public function bodyApplyTorqueImpulse(body: RID, impulse: Float): Void;
    public function bodyAttachCanvasInstanceId(body: RID, id: Int): Void;
    public function bodyAttachObjectInstanceId(body: RID, id: Int): Void;
    public function bodyClearShapes(body: RID): Void;
    public function bodyCreate(): RID;
    public function bodyGetCanvasInstanceId(body: RID): Int;
    public function bodyGetCollisionLayer(body: RID): Int;
    public function bodyGetCollisionMask(body: RID): Int;
    public function bodyGetContinuousCollisionDetectionMode(body: RID): Int;
    public function bodyGetDirectState(body: RID): Physics2DDirectBodyState;
    public function bodyGetMaxContactsReported(body: RID): Int;
    public function bodyGetMode(body: RID): Int;
    public function bodyGetObjectInstanceId(body: RID): Int;
    public function bodyGetParam(body: RID, param: Int): Float;
    public function bodyGetShape(body: RID, shapeIdx: Int): RID;
    public function bodyGetShapeCount(body: RID): Int;
    public function bodyGetShapeMetadata(body: RID, shapeIdx: Int): Dynamic;
    public function bodyGetShapeTransform(body: RID, shapeIdx: Int): Transform2D;
    public function bodyGetSpace(body: RID): RID;
    public function bodyGetState(body: RID, state: Int): Dynamic;
    public function bodyIsOmittingForceIntegration(body: RID): Bool;
    public function bodyRemoveCollisionException(body: RID, exceptedBody: RID): Void;
    public function bodyRemoveShape(body: RID, shapeIdx: Int): Void;
    public function bodySetAxisVelocity(body: RID, axisVelocity: GdVector2): Void;
    public function bodySetCollisionLayer(body: RID, layer: Int): Void;
    public function bodySetCollisionMask(body: RID, mask: Int): Void;
    public function bodySetContinuousCollisionDetectionMode(body: RID, mode: Int): Void;
    public function bodySetForceIntegrationCallback(body: RID, receiver: Object, method: String, userdata: Dynamic): Void;
    public function bodySetMaxContactsReported(body: RID, amount: Int): Void;
    public function bodySetMode(body: RID, mode: Int): Void;
    public function bodySetOmitForceIntegration(body: RID, enable: Bool): Void;
    public function bodySetParam(body: RID, param: Int, value: Float): Void;
    public function bodySetShape(body: RID, shapeIdx: Int, shape: RID): Void;
    public function bodySetShapeAsOneWayCollision(body: RID, shapeIdx: Int, enable: Bool, margin: Float): Void;
    public function bodySetShapeDisabled(body: RID, shapeIdx: Int, disabled: Bool): Void;
    public function bodySetShapeMetadata(body: RID, shapeIdx: Int, metadata: Dynamic): Void;
    public function bodySetShapeTransform(body: RID, shapeIdx: Int, transform: Transform2D): Void;
    public function bodySetSpace(body: RID, space: RID): Void;
    public function bodySetState(body: RID, state: Int, value: Dynamic): Void;
    public function bodyTestMotion(body: RID, from: Transform2D, motion: GdVector2, infiniteInertia: Bool, margin: Float = 0.08, result: Physics2DTestMotionResult, excludeRaycastShapes: Bool = true, exclude: Array<Dynamic>): Bool;
    public function capsuleShapeCreate(): RID;
    public function circleShapeCreate(): RID;
    public function concavePolygonShapeCreate(): RID;
    public function convexPolygonShapeCreate(): RID;
    public function dampedSpringJointCreate(anchorA: GdVector2, anchorB: GdVector2, bodyA: RID, bodyB: RID): RID;
    public function dampedStringJointGetParam(joint: RID, param: Int): Float;
    public function dampedStringJointSetParam(joint: RID, param: Int, value: Float): Void;
    public function freeRid(rid: RID): Void;
    public function getProcessInfo(processInfo: Int): Int;
    public function grooveJointCreate(groove1A: GdVector2, groove2A: GdVector2, anchorB: GdVector2, bodyA: RID, bodyB: RID): RID;
    public function jointGetParam(joint: RID, param: Int): Float;
    public function jointGetType(joint: RID): Int;
    public function jointSetParam(joint: RID, param: Int, value: Float): Void;
    public function lineShapeCreate(): RID;
    public function pinJointCreate(anchor: GdVector2, bodyA: RID, bodyB: RID): RID;
    public function rayShapeCreate(): RID;
    public function rectangleShapeCreate(): RID;
    public function segmentShapeCreate(): RID;
    public function setActive(active: Bool): Void;
    public function setCollisionIterations(iterations: Int): Void;
    public function shapeGetData(shape: RID): Dynamic;
    public function shapeGetType(shape: RID): Int;
    public function shapeSetData(shape: RID, data: Dynamic): Void;
    public function spaceCreate(): RID;
    public function spaceGetDirectState(space: RID): Physics2DDirectSpaceState;
    public function spaceGetParam(space: RID, param: Int): Float;
    public function spaceIsActive(space: RID): Bool;
    public function spaceSetActive(space: RID, active: Bool): Void;
    public function spaceSetParam(space: RID, param: Int, value: Float): Void;
    @:native("__new")
    public function new();
}
