package magicrt.godot;

class OSScreenOrientation {
    public static var Landscape: Int = 0;
    public static var Portrait: Int = 1;
    public static var ReverseLandscape: Int = 2;
    public static var ReversePortrait: Int = 3;
    public static var SensorLandscape: Int = 4;
    public static var SensorPortrait: Int = 5;
    public static var Sensor: Int = 6;
}
class OSSignalNames {
}
@:native("godot.OS")
extern class OS extends Object {
    public var clipboard: String;
    public var currentScreen: Int;
    public var deltaSmoothing: Bool;
    public var exitCode: Int;
    public var keepScreenOn: Bool;
    public var lowProcessorUsageMode: Bool;
    public var lowProcessorUsageModeSleepUsec: Int;
    public var maxWindowSize: Vector2;
    public var minWindowSize: Vector2;
    public var screenOrientation: Int;
    public var tabletDriver: String;
    public var vsyncEnabled: Bool;
    public var vsyncViaCompositor: Bool;
    public var windowBorderless: Bool;
    public var windowFullscreen: Bool;
    public var windowMaximized: Bool;
    public var windowMinimized: Bool;
    public var windowPerPixelTransparencyEnabled: Bool;
    public var windowPosition: Vector2;
    public var windowResizable: Bool;
    public var windowSize: Vector2;
    public function alert(text: String, title: String): Void;
    public function canDraw(): Bool;
    public function canUseThreads(): Bool;
    public function centerWindow(): Void;
    public function closeMidiInputs(): Void;
    public function crash(message: String): Void;
    public function delayMsec(msec: Int): Void;
    public function delayUsec(usec: Int): Void;
    public function dumpMemoryToFile(file: String): Void;
    public function dumpResourcesToFile(file: String): Void;
    public function execute(path: String, arguments: PoolStringArray, blocking: Bool = true, output: Array<Dynamic>, readStderr: Bool = false, openConsole: Bool = false): Int;
    public function findScancodeFromString(string: String): Int;
    public function getAudioDriverCount(): Int;
    public function getAudioDriverName(driver: Int): String;
    public function getCacheDir(): String;
    public function getCmdlineArgs(): PoolStringArray;
    public function getConfigDir(): String;
    public function getConnectedMidiInputs(): PoolStringArray;
    public function getCurrentVideoDriver(): Int;
    public function getDataDir(): String;
    public function getDate(utc: Bool = false): Map<Dynamic, Dynamic>;
    public function getDatetime(utc: Bool = false): Map<Dynamic, Dynamic>;
    public function getDatetimeFromUnixTime(unixTimeVal: Int): Map<Dynamic, Dynamic>;
    public function getDisplayCutouts(): Array<Dynamic>;
    public function getDynamicMemoryUsage(): Int;
    public function getEnvironment(variable: String): String;
    public function getExecutablePath(): String;
    public function getGrantedPermissions(): PoolStringArray;
    public function getImeSelection(): Vector2;
    public function getImeText(): String;
    public function getLatinKeyboardVariant(): String;
    public function getLocale(): String;
    public function getLocaleLanguage(): String;
    public function getMainThreadId(): Int;
    public function getModelName(): String;
    public function getName(): String;
    public function getNativeHandle(handleType: Int): Int;
    public function getPowerPercentLeft(): Int;
    public function getPowerSecondsLeft(): Int;
    public function getPowerState(): Int;
    public function getProcessId(): Int;
    public function getProcessorCount(): Int;
    public function getProcessorName(): String;
    public function getRealWindowSize(): Vector2;
    public function getRestartOnExitArguments(): PoolStringArray;
    public function getScancodeString(code: Int): String;
    public function getScreenCount(): Int;
    public function getScreenDpi(screen: Int = -1): Int;
    public function getScreenMaxScale(): Float;
    public function getScreenPosition(screen: Int = -1): Vector2;
    public function getScreenRefreshRate(screen: Int = -1): Float;
    public function getScreenScale(screen: Int = -1): Float;
    public function getScreenSize(screen: Int = -1): Vector2;
    public function getSplashTickMsec(): Int;
    public function getStaticMemoryPeakUsage(): Int;
    public function getStaticMemoryUsage(): Int;
    public function getSystemDir(dir: Int, sharedStorage: Bool = true): String;
    public function getSystemTimeMsecs(): Int;
    public function getSystemTimeSecs(): Int;
    public function getTabletDriverCount(): Int;
    public function getTabletDriverName(idx: Int): String;
    public function getThreadCallerId(): Int;
    public function getTicksMsec(): Int;
    public function getTicksUsec(): Int;
    public function getTime(utc: Bool = false): Map<Dynamic, Dynamic>;
    public function getTimeZoneInfo(): Map<Dynamic, Dynamic>;
    public function getUniqueId(): String;
    public function getUnixTime(): Int;
    public function getUnixTimeFromDatetime(datetime: Map<Dynamic, Dynamic>): Int;
    public function getUserDataDir(): String;
    public function getVideoDriverCount(): Int;
    public function getVideoDriverName(driver: Int): String;
    public function getVirtualKeyboardHeight(): Int;
    public function getWindowSafeArea(): Rect2;
    public function globalMenuAddItem(menu: String, label: String, id: Dynamic, meta: Dynamic): Void;
    public function globalMenuAddSeparator(menu: String): Void;
    public function globalMenuClear(menu: String): Void;
    public function globalMenuRemoveItem(menu: String, idx: Int): Void;
    public function hasClipboard(): Bool;
    public function hasEnvironment(variable: String): Bool;
    public function hasFeature(tagName: String): Bool;
    public function hasTouchscreenUiHint(): Bool;
    public function hasVirtualKeyboard(): Bool;
    public function hideVirtualKeyboard(): Void;
    public function isDebugBuild(): Bool;
    public function isOkLeftAndCancelRight(): Bool;
    public function isProcessRunning(pid: Int): Bool;
    public function isRestartOnExitSet(): Bool;
    public function isScancodeUnicode(code: Int): Bool;
    public function isStdoutVerbose(): Bool;
    public function isUserfsPersistent(): Bool;
    public function isWindowAlwaysOnTop(): Bool;
    public function isWindowFocused(): Bool;
    public function keyboardGetCurrentLayout(): Int;
    public function keyboardGetLayoutCount(): Int;
    public function keyboardGetLayoutLanguage(index: Int): String;
    public function keyboardGetLayoutName(index: Int): String;
    public function keyboardGetScancodeFromPhysical(scancode: Int): Int;
    public function keyboardSetCurrentLayout(index: Int): Void;
    public function kill(pid: Int): Int;
    public function moveToTrash(path: String): Int;
    public function moveWindowToForeground(): Void;
    public function nativeVideoIsPlaying(): Bool;
    public function nativeVideoPause(): Void;
    public function nativeVideoPlay(path: String, volume: Float, audioTrack: String, subtitleTrack: String): Int;
    public function nativeVideoStop(): Void;
    public function nativeVideoUnpause(): Void;
    public function openMidiInputs(): Void;
    public function printAllResources(tofile: String): Void;
    public function printAllTexturesBySize(): Void;
    public function printResourcesByType(types: PoolStringArray): Void;
    public function printResourcesInUse(short: Bool = false): Void;
    public function readStringFromStdin(): String;
    public function requestAttention(): Void;
    public function requestPermission(name: String): Bool;
    public function requestPermissions(): Bool;
    public function setEnvironment(variable: String, value: String): Bool;
    public function setIcon(icon: Image): Void;
    public function setImeActive(active: Bool): Void;
    public function setImePosition(position: GdVector2): Void;
    public function setNativeIcon(filename: String): Void;
    public function setRestartOnExit(restart: Bool, arguments: PoolStringArray): Void;
    public function setThreadName(name: String): Int;
    public function setUseFileAccessSaveAndSwap(enabled: Bool): Void;
    public function setWindowAlwaysOnTop(enabled: Bool): Void;
    public function setWindowMousePassthrough(region: PoolVector2Array): Void;
    public function setWindowTitle(title: String): Void;
    public function shellOpen(uri: String): Int;
    public function showVirtualKeyboard(existingText: String, multiline: Bool = false): Void;
    public function showVirtualKeyboardType(existingText: String, type: Int = 0): Void;
    public function ttsGetVoices(): Array<Dynamic>;
    public function ttsGetVoicesForLanguage(language: String): PoolStringArray;
    public function ttsIsPaused(): Bool;
    public function ttsIsSpeaking(): Bool;
    public function ttsPause(): Void;
    public function ttsResume(): Void;
    public function ttsSetUtteranceCallback(event: Int, object: Object, callback: String): Void;
    public function ttsSpeak(text: String, voice: String, volume: Int = 50, pitch: Float = 1.0, rate: Float = 1.0, utteranceId: Int = 0, interrupt: Bool = false): Void;
    public function ttsStop(): Void;
    @:native("__new")
    public function new();
}
