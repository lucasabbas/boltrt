-- Generated by Haxe 4.3.6
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
__magicrt_App = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local Person = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
__haxe_Exception = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__magicrt_godot_AABBSignalNames = _hx_e()
__magicrt_godot_ArrayMeshBlendShapeMode = _hx_e()
__magicrt_godot_ArrayMeshSignalNames = _hx_e()
__magicrt_godot__Basis_Basis_Impl_ = _hx_e()
__magicrt_godot_CallbackTweenerSignalNames = _hx_e()
__magicrt_godot_CameraKeepAspect = _hx_e()
__magicrt_godot_CameraDopplerTracking = _hx_e()
__magicrt_godot_CameraProjection = _hx_e()
__magicrt_godot_CameraMergingMode = _hx_e()
__magicrt_godot_CameraPauseMode = _hx_e()
__magicrt_godot_CameraPhysicsInterpolationMode = _hx_e()
__magicrt_godot_CameraSignalNames = _hx_e()
__magicrt_godot_CanvasItemPauseMode = _hx_e()
__magicrt_godot_CanvasItemPhysicsInterpolationMode = _hx_e()
__magicrt_godot_CanvasItemSignalNames = _hx_e()
__magicrt_godot_ColorSignalNames = _hx_e()
__magicrt_godot_ControlGrowHorizontal = _hx_e()
__magicrt_godot_ControlGrowVertical = _hx_e()
__magicrt_godot_ControlFocusMode = _hx_e()
__magicrt_godot_ControlMouseFilter = _hx_e()
__magicrt_godot_ControlMouseDefaultCursorShape = _hx_e()
__magicrt_godot_ControlPauseMode = _hx_e()
__magicrt_godot_ControlPhysicsInterpolationMode = _hx_e()
__magicrt_godot_ControlSignalNames = _hx_e()
__magicrt_godot_CubeMeshSignalNames = _hx_e()
__magicrt_godot_CullInstancePortalMode = _hx_e()
__magicrt_godot_CullInstanceMergingMode = _hx_e()
__magicrt_godot_CullInstancePauseMode = _hx_e()
__magicrt_godot_CullInstancePhysicsInterpolationMode = _hx_e()
__magicrt_godot_CullInstanceSignalNames = _hx_e()
__magicrt_godot_DirectionalLightDirectionalShadowMode = _hx_e()
__magicrt_godot_DirectionalLightDirectionalShadowDepthRange = _hx_e()
__magicrt_godot_DirectionalLightLightBakeMode = _hx_e()
__magicrt_godot_DirectionalLightPortalMode = _hx_e()
__magicrt_godot_DirectionalLightMergingMode = _hx_e()
__magicrt_godot_DirectionalLightPauseMode = _hx_e()
__magicrt_godot_DirectionalLightPhysicsInterpolationMode = _hx_e()
__magicrt_godot_DirectionalLightSignalNames = _hx_e()
__magicrt_godot_EnvironmentBackgroundMode = _hx_e()
__magicrt_godot_EnvironmentTonemapMode = _hx_e()
__magicrt_godot_EnvironmentSsaoQuality = _hx_e()
__magicrt_godot_EnvironmentSsaoBlur = _hx_e()
__magicrt_godot_EnvironmentDofBlurFarQuality = _hx_e()
__magicrt_godot_EnvironmentDofBlurNearQuality = _hx_e()
__magicrt_godot_EnvironmentGlowBlendMode = _hx_e()
__magicrt_godot_EnvironmentSignalNames = _hx_e()
__magicrt_godot_FontSignalNames = _hx_e()
__magicrt_godot_BasisSignalNames = _hx_e()
__magicrt_godot_QuatSignalNames = _hx_e()
__magicrt_godot_Vector2SignalNames = _hx_e()
__magicrt_godot_Vector3SignalNames = _hx_e()
__magicrt_godot_GeometryInstanceCastShadow = _hx_e()
__magicrt_godot_GeometryInstanceLightmapScale = _hx_e()
__magicrt_godot_GeometryInstancePortalMode = _hx_e()
__magicrt_godot_GeometryInstanceMergingMode = _hx_e()
__magicrt_godot_GeometryInstancePauseMode = _hx_e()
__magicrt_godot_GeometryInstancePhysicsInterpolationMode = _hx_e()
__magicrt_godot_GeometryInstanceSignalNames = _hx_e()
__magicrt_godot_ImageSignalNames = _hx_e()
__magicrt_godot_InputEventSignalNames = _hx_e()
__magicrt_godot_InputEventKeySignalNames = _hx_e()
__magicrt_godot_InputEventWithModifiersSignalNames = _hx_e()
__magicrt_godot_IntervalTweenerSignalNames = _hx_e()
__magicrt_godot_LightLightBakeMode = _hx_e()
__magicrt_godot_LightPortalMode = _hx_e()
__magicrt_godot_LightMergingMode = _hx_e()
__magicrt_godot_LightPauseMode = _hx_e()
__magicrt_godot_LightPhysicsInterpolationMode = _hx_e()
__magicrt_godot_LightSignalNames = _hx_e()
__magicrt_godot_MainLoopSignalNames = _hx_e()
__magicrt_godot_MaterialSignalNames = _hx_e()
__magicrt_godot_MeshSignalNames = _hx_e()
__magicrt_godot_MeshInstanceCastShadow = _hx_e()
__magicrt_godot_MeshInstanceLightmapScale = _hx_e()
__magicrt_godot_MeshInstancePortalMode = _hx_e()
__magicrt_godot_MeshInstanceMergingMode = _hx_e()
__magicrt_godot_MeshInstancePauseMode = _hx_e()
__magicrt_godot_MeshInstancePhysicsInterpolationMode = _hx_e()
__magicrt_godot_MeshInstanceSignalNames = _hx_e()
__magicrt_godot_MethodTweenerSignalNames = _hx_e()
__magicrt_godot_MultiMeshColorFormat = _hx_e()
__magicrt_godot_MultiMeshTransformFormat = _hx_e()
__magicrt_godot_MultiMeshCustomDataFormat = _hx_e()
__magicrt_godot_MultiMeshPhysicsInterpolationQuality = _hx_e()
__magicrt_godot_MultiMeshSignalNames = _hx_e()
__magicrt_godot_MultiplayerAPISignalNames = _hx_e()
__magicrt_godot_NetworkedMultiplayerPeerTransferMode = _hx_e()
__magicrt_godot_NetworkedMultiplayerPeerSignalNames = _hx_e()
__magicrt_godot_NodePauseMode = _hx_e()
__magicrt_godot_NodePhysicsInterpolationMode = _hx_e()
__magicrt_godot_NodeSignalNames = _hx_e()
__magicrt_godot_NodePathSignalNames = _hx_e()
__magicrt_godot_ObjectSignalNames = _hx_e()
__magicrt_godot_PackedSceneSignalNames = _hx_e()
__magicrt_godot_PacketPeerSignalNames = _hx_e()
__magicrt_godot_Physics2DDirectSpaceStateSignalNames = _hx_e()
__magicrt_godot_Physics2DShapeQueryParametersSignalNames = _hx_e()
__magicrt_godot_PhysicsDirectSpaceStateSignalNames = _hx_e()
__magicrt_godot_PhysicsShapeQueryParametersSignalNames = _hx_e()
__magicrt_godot_PlaneSignalNames = _hx_e()
__magicrt_godot_PoolByteArraySignalNames = _hx_e()
__magicrt_godot_PoolColorArraySignalNames = _hx_e()
__magicrt_godot_PoolIntArraySignalNames = _hx_e()
__magicrt_godot_PoolRealArraySignalNames = _hx_e()
__magicrt_godot_PoolStringArraySignalNames = _hx_e()
__magicrt_godot_PoolVector2ArraySignalNames = _hx_e()
__magicrt_godot_PoolVector3ArraySignalNames = _hx_e()
__magicrt_godot_PrimitiveMeshSignalNames = _hx_e()
__magicrt_godot_PropertyTweenerSignalNames = _hx_e()
__magicrt_godot__Quat_Quat_Impl_ = _hx_e()
__magicrt_godot_RIDSignalNames = _hx_e()
__magicrt_godot_Rect2SignalNames = _hx_e()
__magicrt_godot_ReferenceSignalNames = _hx_e()
__magicrt_godot_ResourceSignalNames = _hx_e()
__magicrt_godot_SceneStateSignalNames = _hx_e()
__magicrt_godot_SceneTreeSignalNames = _hx_e()
__magicrt_godot_SceneTreeTimerSignalNames = _hx_e()
__magicrt_godot_SceneTreeTweenSignalNames = _hx_e()
__magicrt_godot_ShaderSignalNames = _hx_e()
__magicrt_godot_ShapeSignalNames = _hx_e()
__magicrt_godot_SkinSignalNames = _hx_e()
__magicrt_godot_SkyRadianceSize = _hx_e()
__magicrt_godot_SkySignalNames = _hx_e()
__magicrt_godot_SpatialMergingMode = _hx_e()
__magicrt_godot_SpatialPauseMode = _hx_e()
__magicrt_godot_SpatialPhysicsInterpolationMode = _hx_e()
__magicrt_godot_SpatialSignalNames = _hx_e()
__magicrt_godot_SpatialGizmoSignalNames = _hx_e()
__magicrt_godot_StyleBoxSignalNames = _hx_e()
__magicrt_godot_TextureSignalNames = _hx_e()
__magicrt_godot_ThemeSignalNames = _hx_e()
__magicrt_godot_TransformSignalNames = _hx_e()
__magicrt_godot_Transform2DSignalNames = _hx_e()
__magicrt_godot_TriangleMeshSignalNames = _hx_e()
__magicrt_godot_TweenerSignalNames = _hx_e()
__magicrt_godot_VariantSignalNames = _hx_e()
__magicrt_godot__Vector2_Vector2_Impl_ = _hx_e()
__magicrt_godot__Vector3_Vector3_Impl_ = _hx_e()
__magicrt_godot_ViewportMsaa = _hx_e()
__magicrt_godot_ViewportUsage = _hx_e()
__magicrt_godot_ViewportDebugDraw = _hx_e()
__magicrt_godot_ViewportRenderTargetClearMode = _hx_e()
__magicrt_godot_ViewportRenderTargetUpdateMode = _hx_e()
__magicrt_godot_ViewportShadowAtlasQuad0 = _hx_e()
__magicrt_godot_ViewportShadowAtlasQuad1 = _hx_e()
__magicrt_godot_ViewportShadowAtlasQuad2 = _hx_e()
__magicrt_godot_ViewportShadowAtlasQuad3 = _hx_e()
__magicrt_godot_ViewportPauseMode = _hx_e()
__magicrt_godot_ViewportPhysicsInterpolationMode = _hx_e()
__magicrt_godot_ViewportSignalNames = _hx_e()
__magicrt_godot_ViewportTextureSignalNames = _hx_e()
__magicrt_godot_VisualInstancePortalMode = _hx_e()
__magicrt_godot_VisualInstanceMergingMode = _hx_e()
__magicrt_godot_VisualInstancePauseMode = _hx_e()
__magicrt_godot_VisualInstancePhysicsInterpolationMode = _hx_e()
__magicrt_godot_VisualInstanceSignalNames = _hx_e()
__magicrt_godot_WorldSignalNames = _hx_e()
__magicrt_godot_World2DSignalNames = _hx_e()
__sys_io_File = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

__magicrt_App.new = function() 
  local self = _hx_new(__magicrt_App.prototype)
  __magicrt_App.super(self)
  return self
end
__magicrt_App.super = function(self) 
  _G.process = function(delta) self:process(delta) end;
  _G.physicsProcess = function(delta) self:physicsProcess(delta) end;
  _G.input = function(event) self:input(event) end;
  _G.unhandledInput = function(event) self:unhandledInput(event) end;
  _G.unhandledKeyInput = function(event) self:unhandledKeyInput(event) end;
  self:init();
end
__magicrt_App.__name__ = true
__magicrt_App.prototype = _hx_e();
__magicrt_App.prototype.get_rootNode = function(self) 
  do return rootNode end
end
__magicrt_App.prototype.get_ioManager = function(self) 
  do return ioManager end
end
__magicrt_App.prototype.init = function(self) 
end
__magicrt_App.prototype.process = function(self,delta) 
end
__magicrt_App.prototype.physicsProcess = function(self,delta) 
end
__magicrt_App.prototype.input = function(self,event) 
end
__magicrt_App.prototype.unhandledInput = function(self,event) 
end
__magicrt_App.prototype.unhandledKeyInput = function(self,event) 
end
__magicrt_App.prototype.loadEnginePlugin = function(self,dllPath) 
  loadEnginePlugin(dllPath);
end

__magicrt_App.prototype.__class__ =  __magicrt_App

Main.new = function() 
  local self = _hx_new(Main.prototype)
  Main.super(self)
  return self
end
Main.super = function(self) 
  __magicrt_App.super(self);
end
Main.__name__ = true
Main.main = function() 
  Main.new();
end
Main.add = function(a,b) 
  do return a + b end;
end
Main.sayHello = function(name) 
  _G.print(Std.string(Std.string(Std.string("Hello, ") .. Std.string(name)) .. Std.string("!")));
end
Main.prototype = _hx_e();
Main.prototype.init = function(self) 
  _G.print("Hello, World!");
  _G.print(Std.string(Main.add(4, 6)));
  _G.print(Std.string(Std.string(Std.string(100) .. Std.string(" ")) .. Std.string(28)));
  Main.sayHello("mintkat");
  Main.sayHello("Lucas C. Abbas");
  Main.sayHello("Lily");
  local lucas = Person.new("Lucas", 20, "2004-10-04");
  _G.print(Std.string(lucas:toString()));
  lucas:sayHello();
  local vec3 = __magicrt_godot__Vector3_Vector3_Impl_._new(3, 2, 3);
  _G.print(Std.string((__magicrt_godot__Vector3_Vector3_Impl_.fieldRead(vec3, "toString"))()));
  local vec3_2 = __magicrt_godot__Vector3_Vector3_Impl_._new(2, 3, 2);
  _G.print(Std.string((__magicrt_godot__Vector3_Vector3_Impl_.fieldRead(vec3_2, "toString"))()));
  local vec3_3 = __magicrt_godot__Vector3_Vector3_Impl_.add(vec3, vec3_2);
  _G.print(Std.string((__magicrt_godot__Vector3_Vector3_Impl_.fieldRead(vec3_3, "toString"))()));
  local vec2 = __magicrt_godot__Vector2_Vector2_Impl_._new(6, 1);
  _G.print(Std.string((__magicrt_godot__Vector2_Vector2_Impl_.fieldRead(vec2, "toString"))()));
  local vec2_2 = __magicrt_godot__Vector2_Vector2_Impl_._new(4, 9);
  _G.print(Std.string((__magicrt_godot__Vector2_Vector2_Impl_.fieldRead(vec2_2, "toString"))()));
  local vec2_3 = __magicrt_godot__Vector2_Vector2_Impl_.add(vec2, vec2_2);
  _G.print(Std.string((__magicrt_godot__Vector2_Vector2_Impl_.fieldRead(vec2_3, "toString"))()));
  local _hx_status, _hx_result = pcall(function() 
  
      local godotObject = godot.Object.__new();
      _G.print(Std.string(godotObject:toString()));
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    local e = __haxe_Exception.caught(_g);
    _G.print(Std.string(e:get_message()));
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  local camera = gdx.FreeLookCamera.__new();
  self:get_rootNode():addChild(camera);
  local meshInstance = godot.MeshInstance.__new();
  self:get_rootNode():addChild(meshInstance);
  meshInstance.position = __magicrt_godot__Vector3_Vector3_Impl_._new(0, 0, -5);
  local mesh = godot.CubeMesh.__new();
  meshInstance.mesh = mesh;
  local directionalLight = godot.DirectionalLight.__new();
  self:get_rootNode():addChild(directionalLight);
  local file = __sys_io_File.getContent("data://textFile.txt");
  _G.print(Std.string(file));
  local file2 = __sys_io_File.getContent("win://c/Users/mintkat/Documents/newtxt.txt");
  _G.print(Std.string(file2));
  local windowsSysIo = WindowsSystemIo.__new();
  local file3 = windowsSysIo:loadText(windowsSysIo:getFileUrl("C://Users/mintkat/Documents/newtxt.txt"));
  _G.print(Std.string(file3));
end
Main.prototype.process = function(self,delta) 
end

Main.prototype.__class__ =  Main
Main.__super__ = __magicrt_App
setmetatable(Main.prototype,{__index=__magicrt_App.prototype})

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Person.new = function(name,age,birthday) 
  local self = _hx_new(Person.prototype)
  Person.super(self,name,age,birthday)
  return self
end
Person.super = function(self,name,age,birthday) 
  self.name = name;
  self.age = age;
  self.birthday = birthday;
end
Person.__name__ = true
Person.prototype = _hx_e();
Person.prototype.sayHello = function(self) 
  _G.print(Std.string(Std.string(Std.string("Hello, ") .. Std.string(self.name)) .. Std.string("!")));
end
Person.prototype.getAge = function(self) 
  do return self.age end
end
Person.prototype.setAge = function(self,age) 
  self.age = age;
end
Person.prototype.getBirthday = function(self) 
  do return self.birthday end
end
Person.prototype.setBirthday = function(self,birthday) 
  self.birthday = birthday;
end
Person.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("Person { name = ") .. Std.string(self.name)) .. Std.string(", age = ")) .. Std.string(self.age)) .. Std.string(", birthday = ")) .. Std.string(self.birthday)) .. Std.string(" } ") end
end

Person.prototype.__class__ =  Person

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.caught = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value end;
  else
    do return __haxe_ValueException.new(value, nil, value) end;
  end;
end
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = true
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = true
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__magicrt_godot_AABBSignalNames.new = {}
__magicrt_godot_AABBSignalNames.__name__ = true

__magicrt_godot_ArrayMeshBlendShapeMode.new = {}
__magicrt_godot_ArrayMeshBlendShapeMode.__name__ = true

__magicrt_godot_ArrayMeshSignalNames.new = {}
__magicrt_godot_ArrayMeshSignalNames.__name__ = true

__magicrt_godot__Basis_Basis_Impl_.new = {}
__magicrt_godot__Basis_Basis_Impl_.__name__ = true
__magicrt_godot__Basis_Basis_Impl_._new = function(x,y,z) 
  do return godot.Basis.__new(x, y, z) end;
end
__magicrt_godot__Basis_Basis_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__magicrt_godot__Basis_Basis_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__magicrt_godot__Basis_Basis_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__magicrt_godot__Basis_Basis_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              _G.error(__haxe_Exception.thrown("Invalid index"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__magicrt_godot__Basis_Basis_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__magicrt_godot__Basis_Basis_Impl_.toString = function(v) 
  do return v.toString() end;
end

__magicrt_godot_CallbackTweenerSignalNames.new = {}
__magicrt_godot_CallbackTweenerSignalNames.__name__ = true

__magicrt_godot_CameraKeepAspect.new = {}
__magicrt_godot_CameraKeepAspect.__name__ = true

__magicrt_godot_CameraDopplerTracking.new = {}
__magicrt_godot_CameraDopplerTracking.__name__ = true

__magicrt_godot_CameraProjection.new = {}
__magicrt_godot_CameraProjection.__name__ = true

__magicrt_godot_CameraMergingMode.new = {}
__magicrt_godot_CameraMergingMode.__name__ = true

__magicrt_godot_CameraPauseMode.new = {}
__magicrt_godot_CameraPauseMode.__name__ = true

__magicrt_godot_CameraPhysicsInterpolationMode.new = {}
__magicrt_godot_CameraPhysicsInterpolationMode.__name__ = true

__magicrt_godot_CameraSignalNames.new = {}
__magicrt_godot_CameraSignalNames.__name__ = true

__magicrt_godot_CanvasItemPauseMode.new = {}
__magicrt_godot_CanvasItemPauseMode.__name__ = true

__magicrt_godot_CanvasItemPhysicsInterpolationMode.new = {}
__magicrt_godot_CanvasItemPhysicsInterpolationMode.__name__ = true

__magicrt_godot_CanvasItemSignalNames.new = {}
__magicrt_godot_CanvasItemSignalNames.__name__ = true

__magicrt_godot_ColorSignalNames.new = {}
__magicrt_godot_ColorSignalNames.__name__ = true

__magicrt_godot_ControlGrowHorizontal.new = {}
__magicrt_godot_ControlGrowHorizontal.__name__ = true

__magicrt_godot_ControlGrowVertical.new = {}
__magicrt_godot_ControlGrowVertical.__name__ = true

__magicrt_godot_ControlFocusMode.new = {}
__magicrt_godot_ControlFocusMode.__name__ = true

__magicrt_godot_ControlMouseFilter.new = {}
__magicrt_godot_ControlMouseFilter.__name__ = true

__magicrt_godot_ControlMouseDefaultCursorShape.new = {}
__magicrt_godot_ControlMouseDefaultCursorShape.__name__ = true

__magicrt_godot_ControlPauseMode.new = {}
__magicrt_godot_ControlPauseMode.__name__ = true

__magicrt_godot_ControlPhysicsInterpolationMode.new = {}
__magicrt_godot_ControlPhysicsInterpolationMode.__name__ = true

__magicrt_godot_ControlSignalNames.new = {}
__magicrt_godot_ControlSignalNames.__name__ = true

__magicrt_godot_CubeMeshSignalNames.new = {}
__magicrt_godot_CubeMeshSignalNames.__name__ = true

__magicrt_godot_CullInstancePortalMode.new = {}
__magicrt_godot_CullInstancePortalMode.__name__ = true

__magicrt_godot_CullInstanceMergingMode.new = {}
__magicrt_godot_CullInstanceMergingMode.__name__ = true

__magicrt_godot_CullInstancePauseMode.new = {}
__magicrt_godot_CullInstancePauseMode.__name__ = true

__magicrt_godot_CullInstancePhysicsInterpolationMode.new = {}
__magicrt_godot_CullInstancePhysicsInterpolationMode.__name__ = true

__magicrt_godot_CullInstanceSignalNames.new = {}
__magicrt_godot_CullInstanceSignalNames.__name__ = true

__magicrt_godot_DirectionalLightDirectionalShadowMode.new = {}
__magicrt_godot_DirectionalLightDirectionalShadowMode.__name__ = true

__magicrt_godot_DirectionalLightDirectionalShadowDepthRange.new = {}
__magicrt_godot_DirectionalLightDirectionalShadowDepthRange.__name__ = true

__magicrt_godot_DirectionalLightLightBakeMode.new = {}
__magicrt_godot_DirectionalLightLightBakeMode.__name__ = true

__magicrt_godot_DirectionalLightPortalMode.new = {}
__magicrt_godot_DirectionalLightPortalMode.__name__ = true

__magicrt_godot_DirectionalLightMergingMode.new = {}
__magicrt_godot_DirectionalLightMergingMode.__name__ = true

__magicrt_godot_DirectionalLightPauseMode.new = {}
__magicrt_godot_DirectionalLightPauseMode.__name__ = true

__magicrt_godot_DirectionalLightPhysicsInterpolationMode.new = {}
__magicrt_godot_DirectionalLightPhysicsInterpolationMode.__name__ = true

__magicrt_godot_DirectionalLightSignalNames.new = {}
__magicrt_godot_DirectionalLightSignalNames.__name__ = true

__magicrt_godot_EnvironmentBackgroundMode.new = {}
__magicrt_godot_EnvironmentBackgroundMode.__name__ = true

__magicrt_godot_EnvironmentTonemapMode.new = {}
__magicrt_godot_EnvironmentTonemapMode.__name__ = true

__magicrt_godot_EnvironmentSsaoQuality.new = {}
__magicrt_godot_EnvironmentSsaoQuality.__name__ = true

__magicrt_godot_EnvironmentSsaoBlur.new = {}
__magicrt_godot_EnvironmentSsaoBlur.__name__ = true

__magicrt_godot_EnvironmentDofBlurFarQuality.new = {}
__magicrt_godot_EnvironmentDofBlurFarQuality.__name__ = true

__magicrt_godot_EnvironmentDofBlurNearQuality.new = {}
__magicrt_godot_EnvironmentDofBlurNearQuality.__name__ = true

__magicrt_godot_EnvironmentGlowBlendMode.new = {}
__magicrt_godot_EnvironmentGlowBlendMode.__name__ = true

__magicrt_godot_EnvironmentSignalNames.new = {}
__magicrt_godot_EnvironmentSignalNames.__name__ = true

__magicrt_godot_FontSignalNames.new = {}
__magicrt_godot_FontSignalNames.__name__ = true

__magicrt_godot_BasisSignalNames.new = {}
__magicrt_godot_BasisSignalNames.__name__ = true

__magicrt_godot_QuatSignalNames.new = {}
__magicrt_godot_QuatSignalNames.__name__ = true

__magicrt_godot_Vector2SignalNames.new = {}
__magicrt_godot_Vector2SignalNames.__name__ = true

__magicrt_godot_Vector3SignalNames.new = {}
__magicrt_godot_Vector3SignalNames.__name__ = true

__magicrt_godot_GeometryInstanceCastShadow.new = {}
__magicrt_godot_GeometryInstanceCastShadow.__name__ = true

__magicrt_godot_GeometryInstanceLightmapScale.new = {}
__magicrt_godot_GeometryInstanceLightmapScale.__name__ = true

__magicrt_godot_GeometryInstancePortalMode.new = {}
__magicrt_godot_GeometryInstancePortalMode.__name__ = true

__magicrt_godot_GeometryInstanceMergingMode.new = {}
__magicrt_godot_GeometryInstanceMergingMode.__name__ = true

__magicrt_godot_GeometryInstancePauseMode.new = {}
__magicrt_godot_GeometryInstancePauseMode.__name__ = true

__magicrt_godot_GeometryInstancePhysicsInterpolationMode.new = {}
__magicrt_godot_GeometryInstancePhysicsInterpolationMode.__name__ = true

__magicrt_godot_GeometryInstanceSignalNames.new = {}
__magicrt_godot_GeometryInstanceSignalNames.__name__ = true

__magicrt_godot_ImageSignalNames.new = {}
__magicrt_godot_ImageSignalNames.__name__ = true

__magicrt_godot_InputEventSignalNames.new = {}
__magicrt_godot_InputEventSignalNames.__name__ = true

__magicrt_godot_InputEventKeySignalNames.new = {}
__magicrt_godot_InputEventKeySignalNames.__name__ = true

__magicrt_godot_InputEventWithModifiersSignalNames.new = {}
__magicrt_godot_InputEventWithModifiersSignalNames.__name__ = true

__magicrt_godot_IntervalTweenerSignalNames.new = {}
__magicrt_godot_IntervalTweenerSignalNames.__name__ = true

__magicrt_godot_LightLightBakeMode.new = {}
__magicrt_godot_LightLightBakeMode.__name__ = true

__magicrt_godot_LightPortalMode.new = {}
__magicrt_godot_LightPortalMode.__name__ = true

__magicrt_godot_LightMergingMode.new = {}
__magicrt_godot_LightMergingMode.__name__ = true

__magicrt_godot_LightPauseMode.new = {}
__magicrt_godot_LightPauseMode.__name__ = true

__magicrt_godot_LightPhysicsInterpolationMode.new = {}
__magicrt_godot_LightPhysicsInterpolationMode.__name__ = true

__magicrt_godot_LightSignalNames.new = {}
__magicrt_godot_LightSignalNames.__name__ = true

__magicrt_godot_MainLoopSignalNames.new = {}
__magicrt_godot_MainLoopSignalNames.__name__ = true

__magicrt_godot_MaterialSignalNames.new = {}
__magicrt_godot_MaterialSignalNames.__name__ = true

__magicrt_godot_MeshSignalNames.new = {}
__magicrt_godot_MeshSignalNames.__name__ = true

__magicrt_godot_MeshInstanceCastShadow.new = {}
__magicrt_godot_MeshInstanceCastShadow.__name__ = true

__magicrt_godot_MeshInstanceLightmapScale.new = {}
__magicrt_godot_MeshInstanceLightmapScale.__name__ = true

__magicrt_godot_MeshInstancePortalMode.new = {}
__magicrt_godot_MeshInstancePortalMode.__name__ = true

__magicrt_godot_MeshInstanceMergingMode.new = {}
__magicrt_godot_MeshInstanceMergingMode.__name__ = true

__magicrt_godot_MeshInstancePauseMode.new = {}
__magicrt_godot_MeshInstancePauseMode.__name__ = true

__magicrt_godot_MeshInstancePhysicsInterpolationMode.new = {}
__magicrt_godot_MeshInstancePhysicsInterpolationMode.__name__ = true

__magicrt_godot_MeshInstanceSignalNames.new = {}
__magicrt_godot_MeshInstanceSignalNames.__name__ = true

__magicrt_godot_MethodTweenerSignalNames.new = {}
__magicrt_godot_MethodTweenerSignalNames.__name__ = true

__magicrt_godot_MultiMeshColorFormat.new = {}
__magicrt_godot_MultiMeshColorFormat.__name__ = true

__magicrt_godot_MultiMeshTransformFormat.new = {}
__magicrt_godot_MultiMeshTransformFormat.__name__ = true

__magicrt_godot_MultiMeshCustomDataFormat.new = {}
__magicrt_godot_MultiMeshCustomDataFormat.__name__ = true

__magicrt_godot_MultiMeshPhysicsInterpolationQuality.new = {}
__magicrt_godot_MultiMeshPhysicsInterpolationQuality.__name__ = true

__magicrt_godot_MultiMeshSignalNames.new = {}
__magicrt_godot_MultiMeshSignalNames.__name__ = true

__magicrt_godot_MultiplayerAPISignalNames.new = {}
__magicrt_godot_MultiplayerAPISignalNames.__name__ = true

__magicrt_godot_NetworkedMultiplayerPeerTransferMode.new = {}
__magicrt_godot_NetworkedMultiplayerPeerTransferMode.__name__ = true

__magicrt_godot_NetworkedMultiplayerPeerSignalNames.new = {}
__magicrt_godot_NetworkedMultiplayerPeerSignalNames.__name__ = true

__magicrt_godot_NodePauseMode.new = {}
__magicrt_godot_NodePauseMode.__name__ = true

__magicrt_godot_NodePhysicsInterpolationMode.new = {}
__magicrt_godot_NodePhysicsInterpolationMode.__name__ = true

__magicrt_godot_NodeSignalNames.new = {}
__magicrt_godot_NodeSignalNames.__name__ = true

__magicrt_godot_NodePathSignalNames.new = {}
__magicrt_godot_NodePathSignalNames.__name__ = true

__magicrt_godot_ObjectSignalNames.new = {}
__magicrt_godot_ObjectSignalNames.__name__ = true

__magicrt_godot_PackedSceneSignalNames.new = {}
__magicrt_godot_PackedSceneSignalNames.__name__ = true

__magicrt_godot_PacketPeerSignalNames.new = {}
__magicrt_godot_PacketPeerSignalNames.__name__ = true

__magicrt_godot_Physics2DDirectSpaceStateSignalNames.new = {}
__magicrt_godot_Physics2DDirectSpaceStateSignalNames.__name__ = true

__magicrt_godot_Physics2DShapeQueryParametersSignalNames.new = {}
__magicrt_godot_Physics2DShapeQueryParametersSignalNames.__name__ = true

__magicrt_godot_PhysicsDirectSpaceStateSignalNames.new = {}
__magicrt_godot_PhysicsDirectSpaceStateSignalNames.__name__ = true

__magicrt_godot_PhysicsShapeQueryParametersSignalNames.new = {}
__magicrt_godot_PhysicsShapeQueryParametersSignalNames.__name__ = true

__magicrt_godot_PlaneSignalNames.new = {}
__magicrt_godot_PlaneSignalNames.__name__ = true

__magicrt_godot_PoolByteArraySignalNames.new = {}
__magicrt_godot_PoolByteArraySignalNames.__name__ = true

__magicrt_godot_PoolColorArraySignalNames.new = {}
__magicrt_godot_PoolColorArraySignalNames.__name__ = true

__magicrt_godot_PoolIntArraySignalNames.new = {}
__magicrt_godot_PoolIntArraySignalNames.__name__ = true

__magicrt_godot_PoolRealArraySignalNames.new = {}
__magicrt_godot_PoolRealArraySignalNames.__name__ = true

__magicrt_godot_PoolStringArraySignalNames.new = {}
__magicrt_godot_PoolStringArraySignalNames.__name__ = true

__magicrt_godot_PoolVector2ArraySignalNames.new = {}
__magicrt_godot_PoolVector2ArraySignalNames.__name__ = true

__magicrt_godot_PoolVector3ArraySignalNames.new = {}
__magicrt_godot_PoolVector3ArraySignalNames.__name__ = true

__magicrt_godot_PrimitiveMeshSignalNames.new = {}
__magicrt_godot_PrimitiveMeshSignalNames.__name__ = true

__magicrt_godot_PropertyTweenerSignalNames.new = {}
__magicrt_godot_PropertyTweenerSignalNames.__name__ = true

__magicrt_godot__Quat_Quat_Impl_.new = {}
__magicrt_godot__Quat_Quat_Impl_.__name__ = true
__magicrt_godot__Quat_Quat_Impl_._new = function(x,y,z,w) 
  if (w == nil) then 
    w = 0;
  end;
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Quat.__new(x, y, z, w) end;
end
__magicrt_godot__Quat_Quat_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__magicrt_godot__Quat_Quat_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__magicrt_godot__Quat_Quat_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  if (n == "w") then 
    do return this1.w end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__magicrt_godot__Quat_Quat_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              if (n == "w") then 
                this1.w = value;
              else
                _G.error(__haxe_Exception.thrown("Invalid index"),0);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
end
__magicrt_godot__Quat_Quat_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__magicrt_godot__Quat_Quat_Impl_.toString = function(v) 
  do return v.toString() end;
end

__magicrt_godot_RIDSignalNames.new = {}
__magicrt_godot_RIDSignalNames.__name__ = true

__magicrt_godot_Rect2SignalNames.new = {}
__magicrt_godot_Rect2SignalNames.__name__ = true

__magicrt_godot_ReferenceSignalNames.new = {}
__magicrt_godot_ReferenceSignalNames.__name__ = true

__magicrt_godot_ResourceSignalNames.new = {}
__magicrt_godot_ResourceSignalNames.__name__ = true

__magicrt_godot_SceneStateSignalNames.new = {}
__magicrt_godot_SceneStateSignalNames.__name__ = true

__magicrt_godot_SceneTreeSignalNames.new = {}
__magicrt_godot_SceneTreeSignalNames.__name__ = true

__magicrt_godot_SceneTreeTimerSignalNames.new = {}
__magicrt_godot_SceneTreeTimerSignalNames.__name__ = true

__magicrt_godot_SceneTreeTweenSignalNames.new = {}
__magicrt_godot_SceneTreeTweenSignalNames.__name__ = true

__magicrt_godot_ShaderSignalNames.new = {}
__magicrt_godot_ShaderSignalNames.__name__ = true

__magicrt_godot_ShapeSignalNames.new = {}
__magicrt_godot_ShapeSignalNames.__name__ = true

__magicrt_godot_SkinSignalNames.new = {}
__magicrt_godot_SkinSignalNames.__name__ = true

__magicrt_godot_SkyRadianceSize.new = {}
__magicrt_godot_SkyRadianceSize.__name__ = true

__magicrt_godot_SkySignalNames.new = {}
__magicrt_godot_SkySignalNames.__name__ = true

__magicrt_godot_SpatialMergingMode.new = {}
__magicrt_godot_SpatialMergingMode.__name__ = true

__magicrt_godot_SpatialPauseMode.new = {}
__magicrt_godot_SpatialPauseMode.__name__ = true

__magicrt_godot_SpatialPhysicsInterpolationMode.new = {}
__magicrt_godot_SpatialPhysicsInterpolationMode.__name__ = true

__magicrt_godot_SpatialSignalNames.new = {}
__magicrt_godot_SpatialSignalNames.__name__ = true

__magicrt_godot_SpatialGizmoSignalNames.new = {}
__magicrt_godot_SpatialGizmoSignalNames.__name__ = true

__magicrt_godot_StyleBoxSignalNames.new = {}
__magicrt_godot_StyleBoxSignalNames.__name__ = true

__magicrt_godot_TextureSignalNames.new = {}
__magicrt_godot_TextureSignalNames.__name__ = true

__magicrt_godot_ThemeSignalNames.new = {}
__magicrt_godot_ThemeSignalNames.__name__ = true

__magicrt_godot_TransformSignalNames.new = {}
__magicrt_godot_TransformSignalNames.__name__ = true

__magicrt_godot_Transform2DSignalNames.new = {}
__magicrt_godot_Transform2DSignalNames.__name__ = true

__magicrt_godot_TriangleMeshSignalNames.new = {}
__magicrt_godot_TriangleMeshSignalNames.__name__ = true

__magicrt_godot_TweenerSignalNames.new = {}
__magicrt_godot_TweenerSignalNames.__name__ = true

__magicrt_godot_VariantSignalNames.new = {}
__magicrt_godot_VariantSignalNames.__name__ = true

__magicrt_godot__Vector2_Vector2_Impl_.new = {}
__magicrt_godot__Vector2_Vector2_Impl_.__name__ = true
__magicrt_godot__Vector2_Vector2_Impl_._new = function(x,y) 
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Vector2.__new(x, y) end;
end
__magicrt_godot__Vector2_Vector2_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__magicrt_godot__Vector2_Vector2_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__magicrt_godot__Vector2_Vector2_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__magicrt_godot__Vector2_Vector2_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == "x") then 
        this1.x = value;
      else
        if (n == "y") then 
          this1.y = value;
        else
          _G.error(__haxe_Exception.thrown("Invalid index"),0);
        end;
      end;
    end;
  end;
end
__magicrt_godot__Vector2_Vector2_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__magicrt_godot__Vector2_Vector2_Impl_.toString = function(v) 
  do return v.toString() end;
end

__magicrt_godot__Vector3_Vector3_Impl_.new = {}
__magicrt_godot__Vector3_Vector3_Impl_.__name__ = true
__magicrt_godot__Vector3_Vector3_Impl_._new = function(x,y,z) 
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Vector3.__new(x, y, z) end;
end
__magicrt_godot__Vector3_Vector3_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__magicrt_godot__Vector3_Vector3_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__magicrt_godot__Vector3_Vector3_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__magicrt_godot__Vector3_Vector3_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              _G.error(__haxe_Exception.thrown("Invalid index"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__magicrt_godot__Vector3_Vector3_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__magicrt_godot__Vector3_Vector3_Impl_.toString = function(v) 
  do return v.toString() end;
end

__magicrt_godot_ViewportMsaa.new = {}
__magicrt_godot_ViewportMsaa.__name__ = true

__magicrt_godot_ViewportUsage.new = {}
__magicrt_godot_ViewportUsage.__name__ = true

__magicrt_godot_ViewportDebugDraw.new = {}
__magicrt_godot_ViewportDebugDraw.__name__ = true

__magicrt_godot_ViewportRenderTargetClearMode.new = {}
__magicrt_godot_ViewportRenderTargetClearMode.__name__ = true

__magicrt_godot_ViewportRenderTargetUpdateMode.new = {}
__magicrt_godot_ViewportRenderTargetUpdateMode.__name__ = true

__magicrt_godot_ViewportShadowAtlasQuad0.new = {}
__magicrt_godot_ViewportShadowAtlasQuad0.__name__ = true

__magicrt_godot_ViewportShadowAtlasQuad1.new = {}
__magicrt_godot_ViewportShadowAtlasQuad1.__name__ = true

__magicrt_godot_ViewportShadowAtlasQuad2.new = {}
__magicrt_godot_ViewportShadowAtlasQuad2.__name__ = true

__magicrt_godot_ViewportShadowAtlasQuad3.new = {}
__magicrt_godot_ViewportShadowAtlasQuad3.__name__ = true

__magicrt_godot_ViewportPauseMode.new = {}
__magicrt_godot_ViewportPauseMode.__name__ = true

__magicrt_godot_ViewportPhysicsInterpolationMode.new = {}
__magicrt_godot_ViewportPhysicsInterpolationMode.__name__ = true

__magicrt_godot_ViewportSignalNames.new = {}
__magicrt_godot_ViewportSignalNames.__name__ = true

__magicrt_godot_ViewportTextureSignalNames.new = {}
__magicrt_godot_ViewportTextureSignalNames.__name__ = true

__magicrt_godot_VisualInstancePortalMode.new = {}
__magicrt_godot_VisualInstancePortalMode.__name__ = true

__magicrt_godot_VisualInstanceMergingMode.new = {}
__magicrt_godot_VisualInstanceMergingMode.__name__ = true

__magicrt_godot_VisualInstancePauseMode.new = {}
__magicrt_godot_VisualInstancePauseMode.__name__ = true

__magicrt_godot_VisualInstancePhysicsInterpolationMode.new = {}
__magicrt_godot_VisualInstancePhysicsInterpolationMode.__name__ = true

__magicrt_godot_VisualInstanceSignalNames.new = {}
__magicrt_godot_VisualInstanceSignalNames.__name__ = true

__magicrt_godot_WorldSignalNames.new = {}
__magicrt_godot_WorldSignalNames.__name__ = true

__magicrt_godot_World2DSignalNames.new = {}
__magicrt_godot_World2DSignalNames.__name__ = true

__sys_io_File.new = {}
__sys_io_File.__name__ = true
__sys_io_File.getContent = function(path) 
  local f = _G.io.open(path, "r");
  if (f == nil) then 
    _G.error(__haxe_Exception.thrown(Std.string("Invalid path : ") .. Std.string(path)),0);
  end;
  local s = f:read("*all");
  f:close();
  do return s end;
end
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;__magicrt_godot_ArrayMeshBlendShapeMode.Normalized = 0;
  
  __magicrt_godot_ArrayMeshBlendShapeMode.Relative = 1;
  
  __magicrt_godot_CameraKeepAspect.Width = 0;
  
  __magicrt_godot_CameraKeepAspect.Height = 1;
  
  __magicrt_godot_CameraDopplerTracking.Disabled = 0;
  
  __magicrt_godot_CameraDopplerTracking.IdleStep = 1;
  
  __magicrt_godot_CameraDopplerTracking.PhysicsStep = 2;
  
  __magicrt_godot_CameraProjection.Perspective = 0;
  
  __magicrt_godot_CameraProjection.Orthogonal = 1;
  
  __magicrt_godot_CameraProjection.Frustum = 2;
  
  __magicrt_godot_CameraMergingMode.Inherit = 0;
  
  __magicrt_godot_CameraMergingMode.Off = 1;
  
  __magicrt_godot_CameraMergingMode.On = 2;
  
  __magicrt_godot_CameraPauseMode.Inherit = 0;
  
  __magicrt_godot_CameraPauseMode.Stop = 1;
  
  __magicrt_godot_CameraPauseMode.Process = 2;
  
  __magicrt_godot_CameraPhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_CameraPhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_CameraPhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_CanvasItemPauseMode.Inherit = 0;
  
  __magicrt_godot_CanvasItemPauseMode.Stop = 1;
  
  __magicrt_godot_CanvasItemPauseMode.Process = 2;
  
  __magicrt_godot_CanvasItemPhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_CanvasItemPhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_CanvasItemPhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_CanvasItemSignalNames.draw = "draw";
  
  __magicrt_godot_CanvasItemSignalNames.hide = "hide";
  
  __magicrt_godot_CanvasItemSignalNames.itemRectChanged = "item_rect_changed";
  
  __magicrt_godot_CanvasItemSignalNames.visibilityChanged = "visibility_changed";
  
  __magicrt_godot_ControlGrowHorizontal.Begin = 0;
  
  __magicrt_godot_ControlGrowHorizontal.End = 1;
  
  __magicrt_godot_ControlGrowHorizontal.Both = 2;
  
  __magicrt_godot_ControlGrowVertical.Begin = 0;
  
  __magicrt_godot_ControlGrowVertical.End = 1;
  
  __magicrt_godot_ControlGrowVertical.Both = 2;
  
  __magicrt_godot_ControlFocusMode.None = 0;
  
  __magicrt_godot_ControlFocusMode.Click = 1;
  
  __magicrt_godot_ControlFocusMode.All = 2;
  
  __magicrt_godot_ControlMouseFilter.Stop = 0;
  
  __magicrt_godot_ControlMouseFilter.Pass = 1;
  
  __magicrt_godot_ControlMouseFilter.Ignore = 2;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Arrow = 0;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Ibeam = 1;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.PointingHand = 2;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Cross = 3;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Wait = 4;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Busy = 5;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Drag = 6;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.CanDrop = 7;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Forbidden = 8;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Vsize = 9;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Hsize = 10;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Bdiagsize = 11;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Fdiagsize = 12;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Move = 13;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Vsplit = 14;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Hsplit = 15;
  
  __magicrt_godot_ControlMouseDefaultCursorShape.Help = 16;
  
  __magicrt_godot_ControlPauseMode.Inherit = 0;
  
  __magicrt_godot_ControlPauseMode.Stop = 1;
  
  __magicrt_godot_ControlPauseMode.Process = 2;
  
  __magicrt_godot_ControlPhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_ControlPhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_ControlPhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_ControlSignalNames.focusEntered = "focus_entered";
  
  __magicrt_godot_ControlSignalNames.focusExited = "focus_exited";
  
  __magicrt_godot_ControlSignalNames.guiInput = "gui_input";
  
  __magicrt_godot_ControlSignalNames.minimumSizeChanged = "minimum_size_changed";
  
  __magicrt_godot_ControlSignalNames.modalClosed = "modal_closed";
  
  __magicrt_godot_ControlSignalNames.mouseEntered = "mouse_entered";
  
  __magicrt_godot_ControlSignalNames.mouseExited = "mouse_exited";
  
  __magicrt_godot_ControlSignalNames.resized = "resized";
  
  __magicrt_godot_ControlSignalNames.sizeFlagsChanged = "size_flags_changed";
  
  __magicrt_godot_CullInstancePortalMode.Static = 0;
  
  __magicrt_godot_CullInstancePortalMode.Dynamic = 1;
  
  __magicrt_godot_CullInstancePortalMode.Roaming = 2;
  
  __magicrt_godot_CullInstancePortalMode.Global = 3;
  
  __magicrt_godot_CullInstancePortalMode.Ignore = 4;
  
  __magicrt_godot_CullInstanceMergingMode.Inherit = 0;
  
  __magicrt_godot_CullInstanceMergingMode.Off = 1;
  
  __magicrt_godot_CullInstanceMergingMode.On = 2;
  
  __magicrt_godot_CullInstancePauseMode.Inherit = 0;
  
  __magicrt_godot_CullInstancePauseMode.Stop = 1;
  
  __magicrt_godot_CullInstancePauseMode.Process = 2;
  
  __magicrt_godot_CullInstancePhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_CullInstancePhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_CullInstancePhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_DirectionalLightDirectionalShadowMode.Orthogonal = 0;
  
  __magicrt_godot_DirectionalLightDirectionalShadowMode.Parallel2Splits = 1;
  
  __magicrt_godot_DirectionalLightDirectionalShadowMode.Parallel3Splits = 2;
  
  __magicrt_godot_DirectionalLightDirectionalShadowMode.Parallel4Splits = 3;
  
  __magicrt_godot_DirectionalLightDirectionalShadowDepthRange.Stable = 0;
  
  __magicrt_godot_DirectionalLightDirectionalShadowDepthRange.Optimized = 1;
  
  __magicrt_godot_DirectionalLightLightBakeMode.Disabled = 0;
  
  __magicrt_godot_DirectionalLightLightBakeMode.Indirect = 1;
  
  __magicrt_godot_DirectionalLightLightBakeMode.All = 2;
  
  __magicrt_godot_DirectionalLightPortalMode.Static = 0;
  
  __magicrt_godot_DirectionalLightPortalMode.Dynamic = 1;
  
  __magicrt_godot_DirectionalLightPortalMode.Roaming = 2;
  
  __magicrt_godot_DirectionalLightPortalMode.Global = 3;
  
  __magicrt_godot_DirectionalLightPortalMode.Ignore = 4;
  
  __magicrt_godot_DirectionalLightMergingMode.Inherit = 0;
  
  __magicrt_godot_DirectionalLightMergingMode.Off = 1;
  
  __magicrt_godot_DirectionalLightMergingMode.On = 2;
  
  __magicrt_godot_DirectionalLightPauseMode.Inherit = 0;
  
  __magicrt_godot_DirectionalLightPauseMode.Stop = 1;
  
  __magicrt_godot_DirectionalLightPauseMode.Process = 2;
  
  __magicrt_godot_DirectionalLightPhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_DirectionalLightPhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_DirectionalLightPhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_EnvironmentBackgroundMode.ClearColor = 0;
  
  __magicrt_godot_EnvironmentBackgroundMode.Color = 1;
  
  __magicrt_godot_EnvironmentBackgroundMode.Sky = 2;
  
  __magicrt_godot_EnvironmentBackgroundMode.ColorSky = 3;
  
  __magicrt_godot_EnvironmentBackgroundMode.Canvas = 4;
  
  __magicrt_godot_EnvironmentBackgroundMode.Keep = 5;
  
  __magicrt_godot_EnvironmentBackgroundMode.CameraFeed = 6;
  
  __magicrt_godot_EnvironmentBackgroundMode.Max = 7;
  
  __magicrt_godot_EnvironmentTonemapMode.Linear = 0;
  
  __magicrt_godot_EnvironmentTonemapMode.Reinhardt = 1;
  
  __magicrt_godot_EnvironmentTonemapMode.Filmic = 2;
  
  __magicrt_godot_EnvironmentTonemapMode.Aces = 3;
  
  __magicrt_godot_EnvironmentTonemapMode.AcesFitted = 4;
  
  __magicrt_godot_EnvironmentSsaoQuality.Low = 0;
  
  __magicrt_godot_EnvironmentSsaoQuality.Medium = 1;
  
  __magicrt_godot_EnvironmentSsaoQuality.High = 2;
  
  __magicrt_godot_EnvironmentSsaoBlur.Disabled = 0;
  
  __magicrt_godot_EnvironmentSsaoBlur.Blur1x1 = 1;
  
  __magicrt_godot_EnvironmentSsaoBlur.Blur2x2 = 2;
  
  __magicrt_godot_EnvironmentSsaoBlur.Blur3x3 = 3;
  
  __magicrt_godot_EnvironmentDofBlurFarQuality.Low = 0;
  
  __magicrt_godot_EnvironmentDofBlurFarQuality.Medium = 1;
  
  __magicrt_godot_EnvironmentDofBlurFarQuality.High = 2;
  
  __magicrt_godot_EnvironmentDofBlurNearQuality.Low = 0;
  
  __magicrt_godot_EnvironmentDofBlurNearQuality.Medium = 1;
  
  __magicrt_godot_EnvironmentDofBlurNearQuality.High = 2;
  
  __magicrt_godot_EnvironmentGlowBlendMode.Additive = 0;
  
  __magicrt_godot_EnvironmentGlowBlendMode.Screen = 1;
  
  __magicrt_godot_EnvironmentGlowBlendMode.Softlight = 2;
  
  __magicrt_godot_EnvironmentGlowBlendMode.Replace = 3;
  
  __magicrt_godot_GeometryInstanceCastShadow.Off = 0;
  
  __magicrt_godot_GeometryInstanceCastShadow.On = 1;
  
  __magicrt_godot_GeometryInstanceCastShadow.DoubleSided = 2;
  
  __magicrt_godot_GeometryInstanceCastShadow.ShadowsOnly = 3;
  
  __magicrt_godot_GeometryInstanceLightmapScale.Scale1x = 0;
  
  __magicrt_godot_GeometryInstanceLightmapScale.Scale2x = 1;
  
  __magicrt_godot_GeometryInstanceLightmapScale.Scale4x = 2;
  
  __magicrt_godot_GeometryInstanceLightmapScale.Scale8x = 3;
  
  __magicrt_godot_GeometryInstanceLightmapScale.Max = 4;
  
  __magicrt_godot_GeometryInstancePortalMode.Static = 0;
  
  __magicrt_godot_GeometryInstancePortalMode.Dynamic = 1;
  
  __magicrt_godot_GeometryInstancePortalMode.Roaming = 2;
  
  __magicrt_godot_GeometryInstancePortalMode.Global = 3;
  
  __magicrt_godot_GeometryInstancePortalMode.Ignore = 4;
  
  __magicrt_godot_GeometryInstanceMergingMode.Inherit = 0;
  
  __magicrt_godot_GeometryInstanceMergingMode.Off = 1;
  
  __magicrt_godot_GeometryInstanceMergingMode.On = 2;
  
  __magicrt_godot_GeometryInstancePauseMode.Inherit = 0;
  
  __magicrt_godot_GeometryInstancePauseMode.Stop = 1;
  
  __magicrt_godot_GeometryInstancePauseMode.Process = 2;
  
  __magicrt_godot_GeometryInstancePhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_GeometryInstancePhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_GeometryInstancePhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_LightLightBakeMode.Disabled = 0;
  
  __magicrt_godot_LightLightBakeMode.Indirect = 1;
  
  __magicrt_godot_LightLightBakeMode.All = 2;
  
  __magicrt_godot_LightPortalMode.Static = 0;
  
  __magicrt_godot_LightPortalMode.Dynamic = 1;
  
  __magicrt_godot_LightPortalMode.Roaming = 2;
  
  __magicrt_godot_LightPortalMode.Global = 3;
  
  __magicrt_godot_LightPortalMode.Ignore = 4;
  
  __magicrt_godot_LightMergingMode.Inherit = 0;
  
  __magicrt_godot_LightMergingMode.Off = 1;
  
  __magicrt_godot_LightMergingMode.On = 2;
  
  __magicrt_godot_LightPauseMode.Inherit = 0;
  
  __magicrt_godot_LightPauseMode.Stop = 1;
  
  __magicrt_godot_LightPauseMode.Process = 2;
  
  __magicrt_godot_LightPhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_LightPhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_LightPhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_MainLoopSignalNames.onRequestPermissionsResult = "on_request_permissions_result";
  
  __magicrt_godot_MeshInstanceCastShadow.Off = 0;
  
  __magicrt_godot_MeshInstanceCastShadow.On = 1;
  
  __magicrt_godot_MeshInstanceCastShadow.DoubleSided = 2;
  
  __magicrt_godot_MeshInstanceCastShadow.ShadowsOnly = 3;
  
  __magicrt_godot_MeshInstanceLightmapScale.Scale1x = 0;
  
  __magicrt_godot_MeshInstanceLightmapScale.Scale2x = 1;
  
  __magicrt_godot_MeshInstanceLightmapScale.Scale4x = 2;
  
  __magicrt_godot_MeshInstanceLightmapScale.Scale8x = 3;
  
  __magicrt_godot_MeshInstanceLightmapScale.Max = 4;
  
  __magicrt_godot_MeshInstancePortalMode.Static = 0;
  
  __magicrt_godot_MeshInstancePortalMode.Dynamic = 1;
  
  __magicrt_godot_MeshInstancePortalMode.Roaming = 2;
  
  __magicrt_godot_MeshInstancePortalMode.Global = 3;
  
  __magicrt_godot_MeshInstancePortalMode.Ignore = 4;
  
  __magicrt_godot_MeshInstanceMergingMode.Inherit = 0;
  
  __magicrt_godot_MeshInstanceMergingMode.Off = 1;
  
  __magicrt_godot_MeshInstanceMergingMode.On = 2;
  
  __magicrt_godot_MeshInstancePauseMode.Inherit = 0;
  
  __magicrt_godot_MeshInstancePauseMode.Stop = 1;
  
  __magicrt_godot_MeshInstancePauseMode.Process = 2;
  
  __magicrt_godot_MeshInstancePhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_MeshInstancePhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_MeshInstancePhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_MultiMeshColorFormat.None = 0;
  
  __magicrt_godot_MultiMeshColorFormat.Color8bit = 1;
  
  __magicrt_godot_MultiMeshColorFormat.Float = 2;
  
  __magicrt_godot_MultiMeshTransformFormat.Transform2d = 0;
  
  __magicrt_godot_MultiMeshTransformFormat.Transform3d = 1;
  
  __magicrt_godot_MultiMeshCustomDataFormat.None = 0;
  
  __magicrt_godot_MultiMeshCustomDataFormat.Data8bit = 1;
  
  __magicrt_godot_MultiMeshCustomDataFormat.Float = 2;
  
  __magicrt_godot_MultiMeshPhysicsInterpolationQuality.Fast = 0;
  
  __magicrt_godot_MultiMeshPhysicsInterpolationQuality.High = 1;
  
  __magicrt_godot_MultiplayerAPISignalNames.connectedToServer = "connected_to_server";
  
  __magicrt_godot_MultiplayerAPISignalNames.connectionFailed = "connection_failed";
  
  __magicrt_godot_MultiplayerAPISignalNames.networkPeerConnected = "network_peer_connected";
  
  __magicrt_godot_MultiplayerAPISignalNames.networkPeerDisconnected = "network_peer_disconnected";
  
  __magicrt_godot_MultiplayerAPISignalNames.networkPeerPacket = "network_peer_packet";
  
  __magicrt_godot_MultiplayerAPISignalNames.serverDisconnected = "server_disconnected";
  
  __magicrt_godot_NetworkedMultiplayerPeerTransferMode.Unreliable = 0;
  
  __magicrt_godot_NetworkedMultiplayerPeerTransferMode.UnreliableOrdered = 1;
  
  __magicrt_godot_NetworkedMultiplayerPeerTransferMode.Reliable = 2;
  
  __magicrt_godot_NetworkedMultiplayerPeerSignalNames.connectionFailed = "connection_failed";
  
  __magicrt_godot_NetworkedMultiplayerPeerSignalNames.connectionSucceeded = "connection_succeeded";
  
  __magicrt_godot_NetworkedMultiplayerPeerSignalNames.peerConnected = "peer_connected";
  
  __magicrt_godot_NetworkedMultiplayerPeerSignalNames.peerDisconnected = "peer_disconnected";
  
  __magicrt_godot_NetworkedMultiplayerPeerSignalNames.serverDisconnected = "server_disconnected";
  
  __magicrt_godot_NodePauseMode.Inherit = 0;
  
  __magicrt_godot_NodePauseMode.Stop = 1;
  
  __magicrt_godot_NodePauseMode.Process = 2;
  
  __magicrt_godot_NodePhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_NodePhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_NodePhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_NodeSignalNames.childEnteredTree = "child_entered_tree";
  
  __magicrt_godot_NodeSignalNames.childExitingTree = "child_exiting_tree";
  
  __magicrt_godot_NodeSignalNames.childOrderChanged = "child_order_changed";
  
  __magicrt_godot_NodeSignalNames.ready = "ready";
  
  __magicrt_godot_NodeSignalNames.renamed = "renamed";
  
  __magicrt_godot_NodeSignalNames.treeEntered = "tree_entered";
  
  __magicrt_godot_NodeSignalNames.treeExited = "tree_exited";
  
  __magicrt_godot_NodeSignalNames.treeExiting = "tree_exiting";
  
  __magicrt_godot_ObjectSignalNames.scriptChanged = "script_changed";
  
  __magicrt_godot_ResourceSignalNames.changed = "changed";
  
  __magicrt_godot_SceneTreeSignalNames.connectedToServer = "connected_to_server";
  
  __magicrt_godot_SceneTreeSignalNames.connectionFailed = "connection_failed";
  
  __magicrt_godot_SceneTreeSignalNames.filesDropped = "files_dropped";
  
  __magicrt_godot_SceneTreeSignalNames.globalMenuAction = "global_menu_action";
  
  __magicrt_godot_SceneTreeSignalNames.idleFrame = "idle_frame";
  
  __magicrt_godot_SceneTreeSignalNames.networkPeerConnected = "network_peer_connected";
  
  __magicrt_godot_SceneTreeSignalNames.networkPeerDisconnected = "network_peer_disconnected";
  
  __magicrt_godot_SceneTreeSignalNames.nodeAdded = "node_added";
  
  __magicrt_godot_SceneTreeSignalNames.nodeConfigurationWarningChanged = "node_configuration_warning_changed";
  
  __magicrt_godot_SceneTreeSignalNames.nodeRemoved = "node_removed";
  
  __magicrt_godot_SceneTreeSignalNames.nodeRenamed = "node_renamed";
  
  __magicrt_godot_SceneTreeSignalNames.physicsFrame = "physics_frame";
  
  __magicrt_godot_SceneTreeSignalNames.screenResized = "screen_resized";
  
  __magicrt_godot_SceneTreeSignalNames.serverDisconnected = "server_disconnected";
  
  __magicrt_godot_SceneTreeSignalNames.treeChanged = "tree_changed";
  
  __magicrt_godot_SceneTreeTimerSignalNames.timeout = "timeout";
  
  __magicrt_godot_SceneTreeTweenSignalNames.finished = "finished";
  
  __magicrt_godot_SceneTreeTweenSignalNames.loopFinished = "loop_finished";
  
  __magicrt_godot_SceneTreeTweenSignalNames.stepFinished = "step_finished";
  
  __magicrt_godot_SkyRadianceSize.Size32 = 0;
  
  __magicrt_godot_SkyRadianceSize.Size64 = 1;
  
  __magicrt_godot_SkyRadianceSize.Size128 = 2;
  
  __magicrt_godot_SkyRadianceSize.Size256 = 3;
  
  __magicrt_godot_SkyRadianceSize.Size512 = 4;
  
  __magicrt_godot_SkyRadianceSize.Size1024 = 5;
  
  __magicrt_godot_SkyRadianceSize.Size2048 = 6;
  
  __magicrt_godot_SkyRadianceSize.Max = 7;
  
  __magicrt_godot_SpatialMergingMode.Inherit = 0;
  
  __magicrt_godot_SpatialMergingMode.Off = 1;
  
  __magicrt_godot_SpatialMergingMode.On = 2;
  
  __magicrt_godot_SpatialPauseMode.Inherit = 0;
  
  __magicrt_godot_SpatialPauseMode.Stop = 1;
  
  __magicrt_godot_SpatialPauseMode.Process = 2;
  
  __magicrt_godot_SpatialPhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_SpatialPhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_SpatialPhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_SpatialSignalNames.gameplayEntered = "gameplay_entered";
  
  __magicrt_godot_SpatialSignalNames.gameplayExited = "gameplay_exited";
  
  __magicrt_godot_SpatialSignalNames.visibilityChanged = "visibility_changed";
  
  __magicrt_godot_TweenerSignalNames.finished = "finished";
  
  __magicrt_godot_ViewportMsaa.Disabled = 0;
  
  __magicrt_godot_ViewportMsaa.Msaa2x = 1;
  
  __magicrt_godot_ViewportMsaa.Msaa4x = 2;
  
  __magicrt_godot_ViewportMsaa.Msaa8x = 3;
  
  __magicrt_godot_ViewportMsaa.Msaa16x = 4;
  
  __magicrt_godot_ViewportUsage.Usage2d = 0;
  
  __magicrt_godot_ViewportUsage.Usage2dNoSampling = 1;
  
  __magicrt_godot_ViewportUsage.Usage3d = 2;
  
  __magicrt_godot_ViewportUsage.Usage3dNoEffects = 3;
  
  __magicrt_godot_ViewportDebugDraw.Disabled = 0;
  
  __magicrt_godot_ViewportDebugDraw.Unshaded = 1;
  
  __magicrt_godot_ViewportDebugDraw.Overdraw = 2;
  
  __magicrt_godot_ViewportDebugDraw.Wireframe = 3;
  
  __magicrt_godot_ViewportRenderTargetClearMode.Always = 0;
  
  __magicrt_godot_ViewportRenderTargetClearMode.Never = 1;
  
  __magicrt_godot_ViewportRenderTargetClearMode.OnlyNextFrame = 2;
  
  __magicrt_godot_ViewportRenderTargetUpdateMode.Disabled = 0;
  
  __magicrt_godot_ViewportRenderTargetUpdateMode.Once = 1;
  
  __magicrt_godot_ViewportRenderTargetUpdateMode.WhenVisible = 2;
  
  __magicrt_godot_ViewportRenderTargetUpdateMode.Always = 3;
  
  __magicrt_godot_ViewportShadowAtlasQuad0.Disabled = 0;
  
  __magicrt_godot_ViewportShadowAtlasQuad0.Subdiv1 = 1;
  
  __magicrt_godot_ViewportShadowAtlasQuad0.Subdiv4 = 2;
  
  __magicrt_godot_ViewportShadowAtlasQuad0.Subdiv16 = 3;
  
  __magicrt_godot_ViewportShadowAtlasQuad0.Subdiv64 = 4;
  
  __magicrt_godot_ViewportShadowAtlasQuad0.Subdiv256 = 5;
  
  __magicrt_godot_ViewportShadowAtlasQuad0.Subdiv1024 = 6;
  
  __magicrt_godot_ViewportShadowAtlasQuad0.Max = 7;
  
  __magicrt_godot_ViewportShadowAtlasQuad1.Disabled = 0;
  
  __magicrt_godot_ViewportShadowAtlasQuad1.Subdiv1 = 1;
  
  __magicrt_godot_ViewportShadowAtlasQuad1.Subdiv4 = 2;
  
  __magicrt_godot_ViewportShadowAtlasQuad1.Subdiv16 = 3;
  
  __magicrt_godot_ViewportShadowAtlasQuad1.Subdiv64 = 4;
  
  __magicrt_godot_ViewportShadowAtlasQuad1.Subdiv256 = 5;
  
  __magicrt_godot_ViewportShadowAtlasQuad1.Subdiv1024 = 6;
  
  __magicrt_godot_ViewportShadowAtlasQuad1.Max = 7;
  
  __magicrt_godot_ViewportShadowAtlasQuad2.Disabled = 0;
  
  __magicrt_godot_ViewportShadowAtlasQuad2.Subdiv1 = 1;
  
  __magicrt_godot_ViewportShadowAtlasQuad2.Subdiv4 = 2;
  
  __magicrt_godot_ViewportShadowAtlasQuad2.Subdiv16 = 3;
  
  __magicrt_godot_ViewportShadowAtlasQuad2.Subdiv64 = 4;
  
  __magicrt_godot_ViewportShadowAtlasQuad2.Subdiv256 = 5;
  
  __magicrt_godot_ViewportShadowAtlasQuad2.Subdiv1024 = 6;
  
  __magicrt_godot_ViewportShadowAtlasQuad2.Max = 7;
  
  __magicrt_godot_ViewportShadowAtlasQuad3.Disabled = 0;
  
  __magicrt_godot_ViewportShadowAtlasQuad3.Subdiv1 = 1;
  
  __magicrt_godot_ViewportShadowAtlasQuad3.Subdiv4 = 2;
  
  __magicrt_godot_ViewportShadowAtlasQuad3.Subdiv16 = 3;
  
  __magicrt_godot_ViewportShadowAtlasQuad3.Subdiv64 = 4;
  
  __magicrt_godot_ViewportShadowAtlasQuad3.Subdiv256 = 5;
  
  __magicrt_godot_ViewportShadowAtlasQuad3.Subdiv1024 = 6;
  
  __magicrt_godot_ViewportShadowAtlasQuad3.Max = 7;
  
  __magicrt_godot_ViewportPauseMode.Inherit = 0;
  
  __magicrt_godot_ViewportPauseMode.Stop = 1;
  
  __magicrt_godot_ViewportPauseMode.Process = 2;
  
  __magicrt_godot_ViewportPhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_ViewportPhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_ViewportPhysicsInterpolationMode.On = 2;
  
  __magicrt_godot_ViewportSignalNames.guiFocusChanged = "gui_focus_changed";
  
  __magicrt_godot_ViewportSignalNames.sizeChanged = "size_changed";
  
  __magicrt_godot_VisualInstancePortalMode.Static = 0;
  
  __magicrt_godot_VisualInstancePortalMode.Dynamic = 1;
  
  __magicrt_godot_VisualInstancePortalMode.Roaming = 2;
  
  __magicrt_godot_VisualInstancePortalMode.Global = 3;
  
  __magicrt_godot_VisualInstancePortalMode.Ignore = 4;
  
  __magicrt_godot_VisualInstanceMergingMode.Inherit = 0;
  
  __magicrt_godot_VisualInstanceMergingMode.Off = 1;
  
  __magicrt_godot_VisualInstanceMergingMode.On = 2;
  
  __magicrt_godot_VisualInstancePauseMode.Inherit = 0;
  
  __magicrt_godot_VisualInstancePauseMode.Stop = 1;
  
  __magicrt_godot_VisualInstancePauseMode.Process = 2;
  
  __magicrt_godot_VisualInstancePhysicsInterpolationMode.Inherit = 0;
  
  __magicrt_godot_VisualInstancePhysicsInterpolationMode.Off = 1;
  
  __magicrt_godot_VisualInstancePhysicsInterpolationMode.On = 2;
  
  
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  Main.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
